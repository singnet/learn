
Working Notes (Part C)
----------------------
This file contains a diary of random working notes, which I use to keep
track of what the heck it is that I'm doing.  It is almost surely totally
useless to you, except maybe for some weird voyeuristic reasons.

======================================================================
Feb 2021
--------
Commisioning run for calibration (fake language)

Crash.
ulimit -c unlimited
ulimit -a

 (cog-rocks-stats)
Connected to rocks:///home/ubuntu/data/fake_pairs.rdb
Database contents:
Next aid: 633
Atoms/Links/Nodes a@: 633 l@: 586 n@: 46
Keys/Incoming/Hash k@: 338 i@: 336 h@: 0

Thread 172410 "guile" received signal SIGABRT, Aborted.
[Switching to Thread 0x7fff57fff700 (LWP 14341)]
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
50      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.

(gdb) bt
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007ffff7cbe859 in __GI_abort () at abort.c:79
#2  0x00007ffff7cbe729 in __assert_fail_base (
    fmt=0x7ffff7e54588 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n",
    assertion=0x7ffff787262d "mutex->__data.__owner == 0",
    file=0x7ffff78725fa "../nptl/pthread_mutex_lock.c", line=117,
    function=<optimized out>) at assert.c:92
#3  0x00007ffff7ccff36 in __GI___assert_fail (
    assertion=assertion@entry=0x7ffff787262d "mutex->__data.__owner == 0",
    file=file@entry=0x7ffff78725fa "../nptl/pthread_mutex_lock.c",
    line=line@entry=117,
    function=function@entry=0x7ffff7872790 <__PRETTY_FUNCTION__.10174> "__pthread_mutex_lock") at assert.c:101
#4  0x00007ffff78661a9 in __GI___pthread_mutex_lock (mutex=<optimized out>)
    at ../nptl/pthread_mutex_lock.c:117
#5  0x00007fffececc047 in __gthread_mutex_lock (__mutex=0x5555559b1560)
    at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#6  __gthread_recursive_mutex_lock (__mutex=0x5555559b1560)
    at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:811
#7  std::recursive_mutex::lock (this=0x5555559b1560)
    at /usr/include/c++/9/mutex:106
#8  std::unique_lock<std::recursive_mutex>::lock (this=<synthetic pointer>,
    this=<synthetic pointer>) at /usr/include/c++/9/bits/unique_lock.h:141
#9  std::unique_lock<std::recursive_mutex>::unique_lock (__m=...,
    this=<synthetic pointer>) at /usr/include/c++/9/bits/unique_lock.h:71
#10 opencog::AtomTable::add (this=this@entry=0x5555559b1560, orig=...,
    force=force@entry=false)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomTable.cc:216
#11 0x00007fffecec1b85 in opencog::AtomSpace::add_node (
    this=this@entry=0x5555559b1560, t=<optimized out>, t@entry=240, name=...)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomSpace.cc:287
#12 0x00007fffeceff99b in opencog::SchemeSmob::ss_new_node (
    stype=<optimized out>, sname=<optimized out>, kv_pairs=0x304)
    at /home/ubuntu/src/atomspace/opencog/guile/SchemeSmobNew.cc:390



(gdb) print in
$4 = "(observe-text \" n j d s b o u g\")\n"


scheme@(guile-user)>
==7309== Thread 57:
==7309== Syscall param futex(futex) points to unaddressable byte(s)
==7309==    at 0x4FA2839: __pthread_mutex_unlock_usercnt (pthread_mutex_unlock.c:58)
==7309==    by 0x4FA2839: pthread_mutex_unlock (pthread_mutex_unlock.c:357)
==7309==    by 0x10FAC951: rocksdb::WriteThread::ExitAsBatchGroupFollower(rocksdb::WriteThread::Writer*) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10EFCCAC: rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10EFE9AF: rocksdb::DBImpl::Write(rocksdb::WriteOptions const&, rocksdb::WriteBatch*) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10EFEC1B: rocksdb::DB::Delete(rocksdb::WriteOptions const&, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&) (in /usr/lib/librocksdb.so.5.1
7.2)
==7309==    by 0x10EFEC7F: rocksdb::DBImpl::Delete(rocksdb::WriteOptions const&, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10E65771: rocksdb::DB::Delete(rocksdb::WriteOptions const&, rocksdb::Slice const&) (in /usr/lib/librocksdb.so.5.17.2)
==7309==    by 0x10BC6D97: opencog::RocksStorage::storeAtom(opencog::Handle const&, bool) (RocksIO.cc:254)
==7309==    by 0x10B5F908: opencog::PersistSCM::dflt_store_atom(opencog::Handle) (PersistSCM.cc:289)
==7309==    by 0x10B63459: conv_call_method<0> (SchemePrimitive.h:253)
==7309==    by 0x10B63459: cpp_invoke (SchemePrimitive.h:261)
==7309==    by 0x10B63459: opencog::SchemePrimitive<opencog::Handle, opencog::PersistSCM, opencog::Handle>::invoke(scm_unused_struct*) (SchemePrimitive.h:399)
==7309==    by 0x1011B8CD: opencog::PrimitiveEnviron::do_call(scm_unused_struct*, scm_unused_struct*) (SchemePrimitive.cc:172)
==7309==    by 0x2464E105: ???
==7309==  Address 0x29042bc0 is on thread 62's stack
==7309==  1384 bytes below stack pointer
==7309==

and again .. just like above ...
==7309== Warning: unimplemented fcntl command: 1036
==7309== Thread 59:
==7309== Syscall param futex(futex) points to unaddressable byte(s)
==7309==    at 0x4FA2839: __pthread_mutex_unlock_usercnt (pthread_mutex_unlock.c:58)
...
==7309==  Address 0x45bd3bc0 is on thread 48's stack
==7309==  1384 bytes below stack pointer
==7309==
==7309== Warning: unimplemented fcntl command: 1036
==7309== Warning: unimplemented fcntl command: 1036

identical stack trace, different thread.

maybe put a lock into storeAtom circa line 254???


gdb: almost identical stack trace, except add_link:

#8  std::unique_lock<std::recursive_mutex>::lock (this=<synthetic pointer>,
    this=<synthetic pointer>) at /usr/include/c++/9/bits/unique_lock.h:141
#9  std::unique_lock<std::recursive_mutex>::unique_lock (__m=...,
    this=<synthetic pointer>) at /usr/include/c++/9/bits/unique_lock.h:71
#10 opencog::AtomTable::add (this=this@entry=0x55d164c980c0, orig=...,
    force=force@entry=false)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomTable.cc:216
#11 0x00007f053765ac75 in opencog::AtomSpace::add_link (
    this=this@entry=0x55d164c980c0, t=<optimized out>, t@entry=137,
    outgoing=...)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomSpace.cc:304
#12 0x00007f0537697cf3 in opencog::SchemeSmob::ss_new_link (
    stype=<optimized out>, satom_list=0x55d1682d6f70)
    at /home/ubuntu/src/atomspace/opencog/guile/SchemeSmobNew.cc:508


* 1    Thread 0x7f051a7fc700 (LWP 26727) __GI_raise (sig=sig@entry=6)
    at ../sysdeps/unix/sysv/linux/raise.c:50
  2    Thread 0x7f05412c5740 (LWP 8955)  __GI___libc_read (nbytes=1,
    buf=0x55d1647fcad0, fd=0) at ../sysdeps/unix/sysv/linux/read.c:26
scm_readline

  3    Thread 0x7f05406f7700 (LWP 8956)  futex_wait_cancelable (
    private=<optimized out>, expected=0, futex_word=0x7f0541099dec)
    at ../sysdeps/nptl/futex-internal.h:183

GC_wait_marker ... also 4 5 7 13 14 15 23 24

6 is ConsoleSocket

8 is rocksdb::ThreadPoolImpl::Impl::BGThread 16 17 19 20 22 25 26

9 is opencog::Logger::LogWriter::writing_loop

  10   Thread 0x7f04a4ff9700 (LWP 26729) __pthread_clockjoin_ex (
    threadid=139657933203200, thread_return=0x0, clockid=<optimized out>,
    abstime=<optimized out>, block=<optimized out>)

10 is opencog::GenericShell::~GenericShell also 11 also 39


12 is ~ConsoleSocket

  18   Thread 0x7f04a67fc700 (LWP 9013)  __GI___libc_read (nbytes=1,
    buf=0x7f04a67fb5c0, fd=22) at ../sysdeps/unix/sysv/linux/read.c:26

GC_do_blocking_inner also 43

21 is immortal_thread

27 is opencog::SchemeEval::do_eval

  31   Thread 0x7f04a6ffd700 (LWP 10064) __libc_recvmsg (flags=0,
    msg=0x7f04a6ffcbe0, fd=16) at ../sysdeps/unix/sysv/linux/recvmsg.c:28

31 is boost::asio::detail::socket_ops::recv ServerSocket.cc:143

  35   Thread 0x7f0532fae700 (LWP 8976)  __lll_lock_wait (
    futex=futex@entry=0x55d16514e698, private=0) at lowlevellock.c:52

35 is opencog::CogServer::runLoopStep

45 is shutdown .. asio opencog::ServerConsole::Exit

52 is

add_link
#0  __lll_lock_wait (futex=futex@entry=0x55d164c980c0, private=0)
    at lowlevellock.c:52
#1  0x00007f0540c7c131 in __GI___pthread_mutex_lock (mutex=0x55d164c980c0)
    at ../nptl/pthread_mutex_lock.c:115
#2  0x00007f0537665047 in __gthread_mutex_lock (__mutex=0x55d164c980c0)
    at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:749
#3  __gthread_recursive_mutex_lock (__mutex=0x55d164c980c0)
    at /usr/include/x86_64-linux-gnu/c++/9/bits/gthr-default.h:811
#4  std::recursive_mutex::lock (this=0x55d164c980c0)
    at /usr/include/c++/9/mutex:106
#5  std::unique_lock<std::recursive_mutex>::lock (this=<synthetic pointer>,
    this=<synthetic pointer>) at /usr/include/c++/9/bits/unique_lock.h:141
#6  std::unique_lock<std::recursive_mutex>::unique_lock (__m=...,
    this=<synthetic pointer>) at /usr/include/c++/9/bits/unique_lock.h:71
#7  opencog::AtomTable::add (this=this@entry=0x55d164c980c0, orig=...,
    force=force@entry=false)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomTable.cc:216
#8  0x00007f053765ac75 in opencog::AtomSpace::add_link (
    this=this@entry=0x55d164c980c0, t=<optimized out>, t@entry=137,
    outgoing=...)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomSpace.cc:304
#9  0x00007f0537697cf3 in opencog::SchemeSmob::ss_new_link (
    stype=<optimized out>, satom_list=0x55d1682ac410)
    at /home/ubuntu/src/atomspace/opencog/guile/SchemeSmobNew.cc:508


stack #6 lock is
print __m
$1 = (std::unique_lock<std::recursive_mutex>::mutex_type &) @0x55d164c980c0: {<std::__recursive_mutex_base> = {_M_mutex = {__data = {__lock = 2, __count = 0,
        __owner = -955664080, __nusers = 32514, __kind = 1, __spins = 0,
        __elision = 0, __list = {__prev = 0x0, __next = 0x0}},
      __size = "\002\000\000\000\000\000\000\000\060\271\t\307\002\177\000\000\001", '\000' <repeats 22 times>, __align = 2}}, <No data fields>}

stack 7
print _mtx
$2 = {<std::__recursive_mutex_base> = {_M_mutex = {__data = {__lock = 2,
        __count = 0, __owner = -955664080, __nusers = 32514, __kind = 1,
        __spins = 0, __elision = 0, __list = {__prev = 0x0, __next = 0x0}},
      __size = "\002\000\000\000\000\000\000\000\060\271\t\307\002\177\000\000\001", '\000' <repeats 22 times>, __align = 2}}, <No data fields>}
(gdb) print lck
$3 = {_M_device = 0x55d164c980c0, _M_owns = <optimized out>}


thr 1 stack #10
Its the same lock w/ same lock corruption.`

Happened again...

Above is with stock rocks on ubuntu 20.04 LTS focal

sudo apt purge librocksdb-dev librocksdb5.17  (october 2018)

git clone https://github.com/facebook/rocksdb
make shared_lib
guile: symbol lookup error: /usr/local/lib/opencog/libpersist-rocks.so: undefined symbol: ZSTD_versionNumber


or .. libasan

(cog-get-all-roots)
(fetch-all-words)
(load-atoms-of-type 'WordNode)

after pair-mi:
$ du -s  ~/data/expt-1
4820    /home/ubuntu/data/expt-1
(cog-rocks-stats)
cog-rocks-stats: Atomspace holds 731 atoms
Next aid: 734
Atoms/Links/Nodes a@: 733 l@: 674 n@: 55
Keys/Incoming/Hash k@: 1122 i@: 379 h@: 0


MST counting: crash:
terminate called after throwing an instance of 'opencog::RuntimeException'
  what():  AtomTable - deleteing atomtable 1 which has subtables! (/home/ubuntu/src/atomspace/opencog/atomspace/AtomTable.cc:97)
Aborted

Core was generated by `guile -l mst-count-fake.scm'.
Program terminated with signal SIGABRT, Aborted.
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
50      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
[Current thread is 1 (Thread 0x7f6ce97ea700 (LWP 31842))]
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f6d0d415859 in __GI_abort () at abort.c:79
#2  0x00007f6d0282e951 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#3  0x00007f6d0283a47c in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#4  0x00007f6d02839459 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6
#5  0x00007f6d02839e11 in __gxx_personality_v0 ()
   from /lib/x86_64-linux-gnu/libstdc++.so.6
#6  0x00007f6d02738bdf in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1
#7  0x00007f6d02739271 in _Unwind_RaiseException ()
   from /lib/x86_64-linux-gnu/libgcc_s.so.1
#8  0x00007f6d0283a78c in __cxa_throw ()
   from /lib/x86_64-linux-gnu/libstdc++.so.6
#9  0x00007f6d02d09fef in opencog::AtomTable::~AtomTable (this=0x563608e307a0,
    __in_chrg=<optimized out>)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomTable.cc:97
#10 0x00007f6d02d443dc in opencog::SchemeSmob::release_as (as=<optimized out>)
    at /home/ubuntu/src/atomspace/opencog/guile/SchemeSmobAS.cc:127
#11 0x00007f6d02d44f03 in opencog::SchemeSmob::free_misc (node=<optimized out>)
    at /home/ubuntu/src/atomspace/opencog/guile/SchemeSmobGC.cc:61
#12 0x00007f6d0d38bdff in GC_invoke_finalizers ()
   from /lib/x86_64-linux-gnu/libgc.so.1
#13 0x00007f6d0d69e968 in ?? () from /lib/x86_64-linux-gnu/libguile-3.0.so.1
    __in_chrg=<optimized out>)
    at /home/ubuntu/src/atomspace/opencog/atomspace/AtomTable.cc:97
#10 0x00007f6d02d443dc in opencog::SchemeSmob::release_as (as=<optimized out>)
    at /home/ubuntu/src/atomspace/opencog/guile/SchemeSmobAS.cc:127
#11 0x00007f6d02d44f03 in opencog::SchemeSmob::free_misc (node=<optimized out>)
    at /home/ubuntu/src/atomspace/opencog/guile/SchemeSmobGC.cc:61

Bad!!!

#12 0x00007f6d0d38bdff in GC_invoke_finalizers ()
   from /lib/x86_64-linux-gnu/libgc.so.1

fixed in issue https://github.com/opencog/atomspace/pull/2796

after pair-mi:
$ du -s  ~/data/expt-1
4820    /home/ubuntu/data/expt-1
(cog-rocks-stats)
cog-rocks-stats: Atomspace holds 731 atoms
Next aid: 734
Atoms/Links/Nodes a@: 733 l@: 674 n@: 55
Keys/Incoming/Hash k@: 1122 i@: 379 h@: 0

after mst:
$ du -s ~/data/expt-1
178256  /home/ubuntu/data/expt-1
20420   /home/ubuntu/data/expt-1 after auto-compaction


Next aid: 39919
Atoms/Links/Nodes a@: 39918 l@: 39845 n@: 57
Keys/Incoming/Hash k@: 22173 i@: 18589 h@: 0

Error: support-api: There isn't any cached data on cset
Run `((add-support-compute LLOBJ) 'cache-all)` to compute that data
Error: support-api: There isn't any cached data on cset
Run `((add-support-compute LLOBJ) 'cache-all)` to compute that data

RocksIO.cc:563
remFromSidList
removeSatom (is locked...)
remIncoming (is locked...

remIncoming

(use-modules (opencog) (opencog persist) (opencog persist-rocks))
(cog-rocks-open "rocks:///tmp/foo")
(define a (Concept "a"))
(define b (Concept "b"))
(define l (List a b a b))
(store-atomspace)
(cog-delete! l)

RocksIO.cc:306

Speed is about 16 sentences/second for pair-counting.
135 sentences/sec for MPG parsing

repl:
guile -l pair-count-fake.scm -- a b c

c-start-cogserver

(print-matrix-summary-report star-obj)
((add-support-compute star-obj) 'cache-all)

((make-central-compute star-obj) 'cache-all)

Spinning disks:
iostat -d 5
sudo iotop -d 5
shows about 15MB/sec to 40MB/sec of disk-writes to
spinning disk (dm-0 aka md15 aka sdb/sde)
speed:
Stored 200000 of 394854 left-wilds in 287 secs (139 pairs/sec)
Stored 240000 of 394854 left-wilds in 353 secs (113 pairs/sec)
Stored 280000 of 394854 left-wilds in 413 secs (97 pairs/sec)
Stored 320000 of 394854 left-wilds in 379 secs (106 pairs/sec)

Nasty, old postgres was 10x faster in SSD.
Done storing 394854 left-wilds in 2912 secs

// Never mind, above is due to a stupid debug print...
as_ref_count: oas
Uh no, after removing print its still slow.
Stored 200000 of 394854 left-wilds in 213 secs (188 pairs/sec)
Stored 240000 of 394854 left-wilds in 239 secs (167 pairs/sec)
Stored 280000 of 394854 left-wilds in 286 secs (140 pairs/sec)
Stored 320000 of 394854 left-wilds in 347 secs (115 pairs/sec)


cog-rocks-stats: Atomspace holds 1265536 atoms
Connected to rocks:///home/ubuntu/data/expt-3/mpg_parse.rdb
Database contents:
Next aid: 1265559
Atoms/Links/Nodes a@: 1265558 l@: 1265494 n@: 37
Keys/Incoming/Hash k@: 870932 i@: 790044 h@: 0

du -s /home/ubuntu/data/expt-3/*
1140496 /home/ubuntu/data/expt-3/mpg_parse.rdb
re-open and close:
566020  /home/ubuntu/data/expt-3/mpg_parse.rdb

gram-1.rdb is (gram-classify-greedy-discrim 0.5 4)
gram-2.rdb is (gram-classify-greedy-fuzz 0.65 0.3 4)

a b: <wcl-a>;
c: <wcl-b>;
d e: <wcl-c>;
f g: <wcl-d>;
h i j: <wcl-e>;
k l m n: <wcl-f>;
o: <wcl-g>;
p: <wcl-h>;
q r s: <wcl-i>;
t u: <wcl-j>;

Throw to key `C++-EXCEPTION' with args `("dflt-delete" "Internal Error! (/home/ubuntu/src/atomspace-rocks/opencog/persist/rocks/RocksIO.cc:563)\nFunction args:\n((Section (ctv 1 0 0)\n  (WordNode \"s\" (ctv 1 0 1.19871e+07))\n  (ConnectorSeq\n    (Connector\n      (WordNode \"###LEFT-WALL###\" (ctv 1 0 1.24572e+07))\n      (ConnectorDir \"-\"))\n    (Connector\n      (WordNode \"o\" (ctv 1 0 2.3094e+06))\n      (ConnectorDir \"-\"))\n    (Connector\n      (WordNode \"p\" (ctv 1 0 1.32314e+07))\n      (ConnectorDir \"-\"))\n    (Connector\n      (WordNode \"u\" (ctv 1 0 1.05214e+07))\n      (ConnectorDir \"-\"))))\n)")'.

Can't find the sid in the sid-list...

RocksStorage::remIncoming
RocksStorage::removeSatom(
RocksStorage::removeAtom
Can't find sid=KI4< in sidlist=JqF BTG irD1 nFX2 NoU5 <
klist is=i@XI4:Section<

rei osatom= (this should be XI4 and since its in KI4, KI4 should be in
it's oset.
(ConnectorSeq
	(Connector (WordNode "###LEFT-WALL###")(ConnectorDir "-"))
	(Connector (WordNode "o")(ConnectorDir "-"))
	(Connector (WordNode "p")(ConnectorDir "-"))
	(Connector (WordNode "u")(ConnectorDir "-")))

rein satom= (this is sid KI4) we're trying to delete this
(Section (WordNode "s")
	(ConnectorSeq
	(Connector (WordNode "###LEFT-WALL###")(ConnectorDir "-"))
	(Connector (WordNode "o")(ConnectorDir "-"))
	(Connector (WordNode "p")(ConnectorDir "-"))
	(Connector (WordNode "u")(ConnectorDir "-"))))

sid should be the section... KI4
ConSeq should be XI4
klist is the osid of the osatom

        std::string sidlist;
        rocksdb::Status s = _rfile->Get(rocksdb::ReadOptions(), klist, &sidlist);
export ROCKS_DB_URL=rocks:///home/ubuntu/data/expt-3/gram-2.rdb

Its not there in gram-1.db either
Its not there in mpg_parse.rdb ...

print_all

BlockBasedTableOptions table_options;
table_options.filter_policy.reset(NewBloomFilterPolicy(10, false));
table_options.optimize_filters_for_memory = true;
auto table_factory = new BlockBasedTableFactory(table_options);
rocksdb::Options options;
  options.table_factory.reset(rocksdb::NewBlockBasedTableFactory(table_options));
  rocksdb::DB* db;
  rocksdb::DB::Open(options, name, &db);
table.h

 1/11 Test  #1: BasicSaveUTest ...................   Passed    7.03 sec
 2/11 Test  #2: ValueSaveUTest ...................   Passed    2.62 sec
 3/11 Test  #3: PersistUTest .....................   Passed    0.78 sec
 4/11 Test  #4: FetchUTest .......................   Passed    3.21 sec
 5/11 Test  #5: BasicDeleteUTest .................   Passed    3.39 sec
 6/11 Test  #6: DeleteUTest ......................   Passed    0.60 sec
 7/11 Test  #7: AlphaEquivUTest ..................   Passed    2.93 sec
 8/11 Test  #8: MultiPersistUTest ................   Passed    1.53 sec
 9/11 Test  #9: QueryPersistUTest ................   Passed    2.09 sec
10/11 Test #10: LargeFlatUTest ...................   Passed   76.56 sec
11/11 Test #11: LargeZipfUTest ...................   Passed  167.55 sec
Total Test time (real) = 268.36 sec
Total Test time (real) = 254.93 sec


 1/11 Test  #1: BasicSaveUTest ...................   Passed    6.60 sec
 2/11 Test  #2: ValueSaveUTest ...................   Passed    2.13 sec
 3/11 Test  #3: PersistUTest .....................   Passed    0.84 sec
 4/11 Test  #4: FetchUTest .......................   Passed    2.61 sec
 5/11 Test  #5: BasicDeleteUTest .................   Passed    2.55 sec
 6/11 Test  #6: DeleteUTest ......................   Passed    0.57 sec
 7/11 Test  #7: AlphaEquivUTest ..................   Passed    2.81 sec
 8/11 Test  #8: MultiPersistUTest ................   Passed    0.72 sec
 9/11 Test  #9: QueryPersistUTest ................   Passed    2.53 sec
10/11 Test #10: LargeFlatUTest ...................   Passed   75.35 sec
11/11 Test #11: LargeZipfUTest ...................   Passed  172.17 sec
Total Test time (real) = 268.90 sec
Total Test time (real) = 271.28 sec


(use-modules (opencog))
 (use-modules (opencog persist))
(use-modules (opencog persist-rocks))

(define a (Concept "a"))
(define b (Concept "b"))
(define l1 (List a b))
(define l2 (List l1 a))
(cog-rocks-open "rocks:///tmp/foo")
(store-atom l2)

(cog-delete-recursive! a)

Boom.
$ du -s *rdb
7016    fake_pairs.rdb
21710584        gram-2.rdb   <<<<<<<<<<< wtf
417488  mpg_parse-no-margs.rdb
954720  mpg_parse.rdb

closing and reopening does this:
538360  gram-2.rdb


---------Bingo! Dist=0.7606 for class "j n" -- "t"
Can't find sid=sQ23< in sidlist=xQ23 pNu5 <
inset key=i@0R23:Section<
remin osatom=
(ConnectorSeq
	(Connector (WordNode "###LEFT-WALL###")(ConnectorDir "-"))
	(Connector (WordNode "j")(ConnectorDir "-"))
	(Connector (WordNode "g")(ConnectorDir "-"))
	(Connector (WordNode "t")(ConnectorDir "-"))
	(Connector (WordNode "s")(ConnectorDir "-"))
	(Connector (WordNode "s")(ConnectorDir "-")))
reminc satom=sQ23
(Section (WordNode "t")
(ConnectorSeq
	(Connector (WordNode "###LEFT-WALL###")(ConnectorDir "-"))
	(Connector (WordNode "j")(ConnectorDir "-"))
	(Connector (WordNode "g")(ConnectorDir "-"))
	(Connector (WordNode "t")(ConnectorDir "-"))
	(Connector (WordNode "s")(ConnectorDir "-"))
	(Connector (WordNode "s")(ConnectorDir "-"))))
well foo, delete was n=0 r=0 satom=sQ23
(Section (WordNode "t")(ConnectorSeq (Connector (WordNode "###LEFT-WALL###")(ConnectorDir "-"))(Connector (WordNode "j")(ConnectorDir "-"))(Connector (WordNode "g")(ConnectorDir "-"))(Connector (WordNode "t")(ConnectorDir "-"))(Connector (WordNode "s")(ConnectorDir "-"))(Connector (WordNode "s")(ConnectorDir "-"))))
ice-9/boot-9.scm:1669:16: In procedure raise-exception:
Throw to key `C++-EXCEPTION' with args `("dflt-delete" "Internal Error! (/home/ubuntu/src/atomspace-rocks/opencog/persist/rocks/RocksIO.cc:582)
Function args:
((Section (ctv 1 0 0)
  (WordNode "t" (ctv 1 0 1.0531e+07))
  (ConnectorSeq
    (Connector
      (WordNode "###LEFT-WALL###" (ctv 1 0 1.24572e+07))
  (ConnectorDir "-"))
    (Connector
      (WordNode "j" (ctv 1 0 1.56322e+07))
      (ConnectorDir "-"))
    (Connector
      (WordNode "g" (ctv 1 0 4.84869e+06))
      (ConnectorDir "-"))
    (Connector
      (WordNode "t" (ctv 1 0 1.0531e+07))
      (ConnectorDir "-"))
    (Connector
     (WordNode "s" (ctv 1 0 1.19871e+07))
      (ConnectorDir "-"))
    (Connector
      (WordNode "s" (ctv 1 0 1.19871e+07))
      (ConnectorDir "-"))))
)")'.

(cog-rocks-get "i@0R23:Section")  yes its missing
(cog-rocks-get "a@sQ23")   this is the section.
(cog-rocks-get "l@(ConnectorSeq (Connector (WordNode \"###LEFT-WALL###\")(ConnectorDir \"-\"))(Connector (WordNode \"j\")(ConnectorDir \"-\"))(Connector (WordNode \"g\")(ConnectorDir \"-\"))(Connector (WordNode \"t\")(ConnectorDir \"-\"))(Connector (WordNode \"s\")(ConnectorDir \"-\"))(Connector (WordNode \"s\")(ConnectorDir \"-\")))")
yes, this is 0R23 so wtf...


Huh. mpg_parse:
(cog-rocks-get "i@0R23:Section") ...  also missing...
(cog-rocks-get "a@sQ23")  is the expected secion.
(cog-rocks-get "l@ returns 0R23  as expcected... so wtf.

How about no-margs... also missing there...

(cog-rocks-get "l@(Section (WordNode \"t\")(ConnectorSeq (Connector (WordNode \"###LEFT-WALL###\")(ConnectorDir \"-\"))(Connector (WordNode \"j\")(ConnectorDir \"-\"))(Connector (WordNode \"g\")(ConnectorDir \"-\"))(Connector (WordNode \"t\")(ConnectorDir \"-\"))(Connector (WordNode \"s\")(ConnectorDir \"-\"))(Connector (WordNode \"s\")(ConnectorDir \"-\"))))")

gives sQ23 exactly as expected. ...

Conclude: dj parsing fails to write the sections correctly ... why?
How? WTF???

/data/expt-3/bad-again/mpg_parse-no-margs.rdb
Next aid: 870677
Atoms/Links/Nodes a@: 870676 l@: 870624 n@: 34
Keys/Incoming/Hash k@: 476041 i@: 395182 h@: 0


Mising sid dR92 (ConnectorSeq (Connector (WordNode "c")(ConnectorDir "-"))(Connector (WordNode "p")(ConnectorDir "+"))(Connector (WordNode "c")(ConnectorDir "+"))(Connector (WordNode "j")(ConnectorDir "+"))(Connector (WordNode "t")(ConnectorDir "+")))
Not in incoming for DB (Connector (WordNode "c")(ConnectorDir "-"))

(cog-rocks-get "l@(ConnectorSeq (Connector (WordNode \"c\")(ConnectorDir \"-\"))(Connector (WordNode \"p\")(ConnectorDir \"+\"))(Connector (WordNode \"c\")(ConnectorDir \"+\"))(Connector (WordNode \"j\")(ConnectorDir \"+\"))(Connector (WordNode \"t\")(ConnectorDir \"+\")))")
dR92

OK -- fake_pairs has one bad link ... out of 480
Ahhh!
Mising sid M1 (EvaluationLink (LinkGrammarRelationshipNode "ANY")(ListLink (WordNode "p")(WordNode "d")))
Not in incoming for K1 (ListLink (WordNode "p")(WordNode "d"))
cog-rocks-get "i@K1:")
rkey: >>i@K1:EvaluationLink<<    rval: >>G1 <<
(cog-rocks-get "a@G1")
rkey: >>a@G1<<    rval: >>(EvaluationLink (LinkGrammarRelationshipNode "ANY")(ListLink (WordNode "p")(WordNode "d")))<<

... M1 and G1 are the same... Ooops!

Hypoth:
two threads writing, neither thread finds l@ or n@ so start a new one.
200 looks it up.
235 writes it.

17008

expt-3/bad-again/mpg_parse-no-margs.rdb
has
Next aid: 870677
Atoms/Links/Nodes a@: 870676 l@: 870624 n@: 34
Keys/Incoming/Hash k@: 476041 i@: 395182 h@: 0
Same M1/G1 from above and three more... total of 4

expt-3/bad-again/mpg_parse.rdb (with marginals) has

----------
Try again:
stock rocksdb-5.17 from ubuntu focal
mounted on ssd
djgeneration is now:

OLD speed:
MPG-Processing file >>>corpus-7.txt<<<
Sent out article in 259 seconds
MPG-Processing file >>>corpus-11.txt<<<
Sent out article in 648 seconds
MPG-Processing file >>>corpus-12.txt<<<
Sent out article in 1134 seconds
MPG-Processing file >>>corpus-10.txt<<<
Sent out article in 1185 seconds
MPG-Processing file >>>corpus-8.txt<<<
Sent out article in 916 seconds
MPG-Processing file >>>corpus-9.txt<<<
Sent out article in 1218 seconds
real    90m16.308s

NEW speed:
MPG-Processing file >>>corpus-7.txt<<<
Sent out article in 257 seconds
MPG-Processing file >>>corpus-11.txt<<<
Sent out article in 502 seconds
MPG-Processing file >>>corpus-12.txt<<<
Sent out article in 958 seconds
MPG-Processing file >>>corpus-10.txt<<<
Sent out article in 977 seconds
MPG-Processing file >>>corpus-8.txt<<<
Sent out article in 774 seconds
MPG-Processing file >>>corpus-9.txt<<<
Sent out article in 1020 seconds
real    75m45.906s
real    80m52.774s

-----------
Restarted pair counting from scratch in expt-4

Why is this so slow!???
Splitting and word-pair counting file >>>corpus-7.txt<<<
Sent out article in 1764 seconds
Splitting and word-pair counting file >>>corpus-11.txt<<<
Sent out article in 3788 seconds
Splitting and word-pair counting file >>>corpus-12.txt<<<
Sent out article in 4706 seconds
24GB or RAM at this point running at 680% cpu
$ du -s *
292816  fake_pairs.rdb
guile looks OK.
Something is leaking RAM.
Splitting and word-pair counting file >>>corpus-10.txt<<<
Sent out article in 4025 seconds
Splitting and word-pair counting file >>>corpus-8.txt<<<
Sent out article in 3333 seconds
Splitting and word-pair counting file >>>corpus-9.txt<<<
Sent out article in 3654 seconds
real    359m9.453s

(gc-time-taken . 10549268042307)  Yow!!!
(heap-size . 42799104) 43MB
(heap-free-size . 16207872)
(heap-total-allocated . 449802881088) ; Yow! 450GB!!! what the!?
(heap-allocated-since-gc . 2444768)
(protected-objects . 51) (gc-times . 35781))

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
12795 ubuntu    20   0   40.5g  37.6g  38708 S   0.3  14.9   2370:57 guile

Total of 445 atoms in atomspace ...

djparsing: Same as "NEW speed", above.
real    78m48.721s

$ du -s *
728     fake_pairs.rdb
532628  mpg_parse.rdb

disjunct marginals:
      (define pca (make-pseudo-cset-api))
      (define psa (add-pair-stars pca))
      (define btr (batch-transpose psa))
      (psa 'fetch-pairs)
Elapsed time to load csets: 54 secs

((add-support-compute psa) 'cache-all)
Finished left norm marginals in 176 secs
Finished left totals in 17 secs
Finished right norm marginals in 25 secs
Finished right totals in 0 secs

piss-ant slow as before:
(btr 'mmt-marginals)
Stored 240000 of 370186 left-wilds in 321 secs (125 pairs/sec)
Stored 280000 of 370186 left-wilds in 366 secs (109 pairs/sec)
Stored 320000 of 370186 left-wilds in 423 secs (95 pairs/sec)
Done storing 370186 left-wilds in 2511 secs

--------------
expt-5 is the postgres version
apt install postgresql-client postgresql pgtop libpq-dev

Do NOT do these opts in /etc/postgresql/12/main
effective_cache_size = 60GB
seq_page_cost = 0.1
random_page_cost = 0.1
checkpoint_completion_target = 0.9
effective_io_concurrency = 100
max_worker_processes = 24

Throw to key `C++-EXCEPTION' with args `("sql-create" "Failed to execute SQL command!\nPQresult message: ERROR:  database \"foo\" already exists\n\nPQ query was: CREATE DATABASE foo; (/home/ubuntu/src/atomspace/opencog/persist/sql/multi-driver/ll-pg-cxx.cc:130)\nFunction args:\n(postgres:///foo)")'.

Throw to key `C++-EXCEPTION' with args `("sql-create" "Cannot connect to database: FATAL:  database \"foo\" does not exist\n (/home/ubuntu/src/atomspace/opencog/persist/sql/multi-driver/ll-pg-cxx.cc:54)\nFunction args:\n(postgres:///foo)")'

postgres:///fake_pairs

(use-modules (opencog) (opencog persist) (opencog persist-sql))
(sql-create "postgres:///fake_pairs")

Splitting and word-pair counting file >>>corpus-7.txt<<<
Sent out article in 1707 seconds
Splitting and word-pair counting file >>>corpus-11.txt<<<
Sent out article in 3007 seconds
Splitting and word-pair counting file >>>corpus-12.txt<<<
Sent out article in 3455 seconds
Splitting and word-pair counting file >>>corpus-10.txt<<<
Sent out article in 3196 seconds
Splitting and word-pair counting file >>>corpus-8.txt<<<
Sent out article in 2479 seconds
Splitting and word-pair counting file >>>corpus-9.txt<<<
Sent out article in 2738 seconds
real    279m53.779s
Much faster than the rocksDB version but still stunningly slow...

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
23108 ubuntu    20   0   39.1g  37.3g  30760 S   0.0  14.8   1958:42 guile

Total of 445 atoms in atomspace ...
(gc-stats)
((gc-time-taken . 7407763599459) ;; 7407 seconds=2 hours whoa
(heap-size . 33619968) (heap-free-size . 13774848)
(heap-total-allocated . 449690164592) 450 GBytes just like rocks version
(heap-allocated-since-gc . 6156032)
(protected-objects . 51) (gc-times . 29863))

OK, so mem explosion was a link-grammar init-table bug.
https://github.com/opencog/link-grammar/pull/1149

Also tweaked postgress config:
Splitting and word-pair counting file >>>corpus-7.txt<<<
Sent out article in 1466 seconds
Splitting and word-pair counting file >>>corpus-11.txt<<<
Sent out article in 2996 seconds

after parsing 96044 sentences --
((gc-time-taken . 3341717491309)  <<< 3341 seconds ouch!
(heap-size . 33153024) (heap-free-size . 18305024)
(gc-times . 19226)) << so one gc every 4.995 sentences ...
is this hard-coded somewhere?
`sometimes-gc` and `maybe-gc

(report-avg-gc-cpu-time)
Elapsed: 5544.8 secs. Rate: 213.7 gc/min %cpu-GC: 63.66%  %cpu-use: 696.6%

=============================
currrent status postgres word pair counting:
... real    279m2.812s == 16743 secs wall clock
total of 290676 sentences so: 17.36 sentences/second
cputime= 1896:14 = 113775 secs so 6.8 threads avg.
cpu processing is 2.55 sents per cpu sec.
(gc-time-taken . 8468975661196) = 8468 secs = 7.4% in gc ...
(gc-times . 32526)) = 8.9 sentences per gc
(heap-total-allocated . 449898824256) = 450GB = 1.5MB/sentence

vs same dataset, RocksDB:
... real    313m46.959s = 18827 secs wall clock
total of 290676 sentences so: 15.4 sentences/second
cputime= 2098:46 = 125946 secs so 6.7 threads avg
cpu processing is 2.3 sents per cpu-sec
(gc-time-taken . 9867992214539) = 9868 secs = 7.8% in gc
(gc-times . 64144) = 4.5 sentences per gc
(heap-total-allocated . 449155740720) = 449GB = 1.5MB/sentence

why so much??


-----------
disjunct counting ...
cogserver is nearly idle...
MPG-Processing file >>>corpus-7.txt<<<
Can't connect to port 18108!
Seems to be waiting on postgres, which is waiting on disk,
because rocks in another process is hogging the disk bandwidth!?
This is the non-optimized postgres...

MPG-Processing file >>>corpus-7.txt<<<
Sent out article in 851 seconds
MPG-Processing file >>>corpus-11.txt<<<
Sent out article in 1485 seconds
MPG-Processing file >>>corpus-12.txt<<<
Sent out article in 1513 seconds
MPG-Processing file >>>corpus-10.txt<<<
Sent out article in 1141 seconds
MPG-Processing file >>>corpus-8.txt<<<
Sent out article in 876 seconds
MPG-Processing file >>>corpus-9.txt<<<
Sent out article in 1004 seconds
real    115m55.803s   (this is the non-optimized postgres)

DB activity: 587 tps,  0 rollbs/s,   6 buffer r/s, 99 hit%,    941 row r/s,  47
DB activity: 638 tps,  0 rollbs/s,   5 buffer r/s, 99 hit%,   1132 row r/s,  613 row w/s
DB activity: 675 tps,  0 rollbs/s,   4 buffer r/s, 99 hit%,   1275 row r/s,  683 row w/s

DB I/O:     0 reads/s,     0 KB/s,  1169 writes/s,  5101 KB/s

Total DISK READ:         0.00 B/s | Total DISK WRITE:         2.55 M/s
Current DISK READ:       0.00 B/s | Current DISK WRITE:       2.53 M/s

Why is pg_top reporting twice the rate of iotop? Is this an mdraid thing?

  PID USERNAME PRI NICE  SIZE   RES STATE   TIME   WCPU    CPU COMMAND
11723 postgres  20    0  217M   12M sleep   0:04  4.21%  8.74% postgres: 12/mai
11720 postgres  20    0  217M   12M sleep   0:09  5.48%  8.54% postgres: 12/mai
11727 postgres  20    0  217M   12M sleep   0:09  6.37%  8.34% postgres: 12/mai
11728 postgres  20    0  217M   12M run     0:07  4.63%  8.34% postgres: 12/mai
11722 postgres  20    0  217M   12M sleep   0:09  5.07%  6.95% postgres: 12/mai
11729 postgres  20    0  217M   12M sleep   0:03  3.44%  5.36% postgres: 12/mai
11732 postgres  20    0  218M   16M sleep   0:09  4.77%  0.79% postgres: 12/mai
24851 postgres  20    0  215M 6144K sleep   0:30  0.06%  0.00% postgres: 12/mai
11725 postgres  20    0  217M   12M sleep   0:08  4.22%  0.00% postgres: 12/mai


((PredicateNode . 15) (ListLink . 240) (AnyNode . 2) (Connector . 29) (ConnectorDir . 2) (ConnectorSeq . 371468) (Section . 466340) (EvaluationLink . 240)
(TypeNode . 1) (AnchorNode . 1) (SchemaNode . 1) (PostgresStorageNode . 1) (WordNode . 15) (LinkGrammarRelationshipNode . 1))

(psa 'fetch-pairs)
Elapsed time to load csets: 65 secs
((add-support-compute psa) 'cache-all)
(btr 'mmt-marginals)
Done storing 371468 left-wilds in 1567 secs
Done storing 371515 left-wilds in 1722 secs
OK, so that's faster than RocksDB, which took 2511 secs
rocks started out faster, then really slowed down...
Why?

Also, why is the number different?

(define rpt-obj (add-report-api psa))
(define size (rpt-obj 'num-pairs))
(define size (rpt-obj 'left-dim))

(define dim-key (PredicateNode "*-Dimension Key-*"))
(define wild-atom (psa 'wild-wild))

      (define (get-left-dim)
         (inexact->exact (round
            (cog-value-ref (cog-value wild-atom dim-key) 0))))

support stuff was not stored ...!? Why?
((add-support-compute psa) 'cache-all)
fails to compute the dim key

well, OK, central-compute is needed for that...

   (define size (rpt-obj 'num-pairs)) same as (psu 'total-support-left
                               or total-support-right
   (define nrows (rpt-obj 'left-dim))
same as (psa 'left-basis-size)

   (define ncols (rpt-obj 'right-dim))


-----
expt-6 valgrind

corpus-3.txt
==29958==    definitely lost: 3,151,147 bytes in 67 blocks
==29958==    indirectly lost: 310 bytes in 10 blocks
==29958==      possibly lost: 139,792 bytes in 26 blocks

==29958==    by 0x120C2218: init_table (count.c:216)
==29958==    by 0x120C2218: alloc_count_context (count.c:1333)
==29958==    by 0x120C4EDB: classic_parse (parse.c:417)
==29958==    by 0x1209EBFF: sentence_parse (api.c:698)
==29958==    by 0x12065C49: opencog::LGParseLink::execute(opencog::AtomSpace*, bool) (LGParseLink.cc:173)

corpus-4.txt
==25891==    definitely lost: 14,753,451 bytes in 242 blocks
==25891==    indirectly lost: 3,434,581 bytes in 289 blocks
==25891==      possibly lost: 1,188,368 bytes in 34 blocks

140 is ulimit
557
848
1865 -> 1185

OK, so 5481 sents in real    5m43.822s
so 16 sents/second
But only 1017 thread frees...!?

with valgrind ... stopped at 1017 thread frees ...
Ohh duhh bad code.

OK, so 5481 sents in real    3m24.520s = 204 secs
so 27 sents/sec  thats better.
and ram looks good but gc-time-taken=115 secs so wow too much.
(gc-times . 1342) maybe its too much

OK fixed the leak, it seems:

Again: with rocks:
Splitting and word-pair counting file >>>corpus-7.txt<<<
Sent out article in 1938 seconds
Splitting and word-pair counting file >>>corpus-11.txt<<<
Sent out article in 4147 seconds

((gc-time-taken . 2683799849797)
(heap-size . 22302720)
(gc-times . 14410))

at 90686 sentences parsed... so one gc every 6.3 sentences

Elapsed: 6474.5 secs. Rate: 134.7 gc/min %cpu-GC: 41.82%  %cpu-use: 573.7%

vast amounts of gc because vast amounts of heap... who is using this?

--------------------------------------
expt-8

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))
(psa 'fetch-pairs)

(psa 'left-basis)
(psa 'right-stars  (WordNode "mouse"))

dog cat mouse bird squirrel:
   the- or (the- & chased+ & the+) or (the- & saw+ & the+)

the: LEFT-WALL- & (cat+ or squirrel or mouse+ or bird+ or dog+)

saw chased: (bird- or cat- or ...) & the+;

~/src/learn/run/4*/run-gram-cogserver.sh

(gram-classify-greedy-discrim 0.5 4)
(cog-get-atoms 'WordClassNode)
(cog-get-root (WordClassNode "squirrel dog"))
(cog-get-root (WordClassNode "saw chased"))

(star-obj 'right-stars (Word "saw"))
(star-obj 'right-duals (Word "saw"))

saw chased:

(gram-classify-greedy-fuzz 0.65 0.3 4)

/usr/local/share/guile/3.0
[GenericShell] evaluator error:
ice-9/boot-9.scm:
(quit-exception?
(apply throw 'quit args))

_evaluator->eval_error()
_caught_error
_error_string

scm_primitive_exit(0) foo
get_quit_exception
scm_exit_status
_wait_done.notify_all();
restore_output
termios
libguile/posix.c:
~/src/learn/run/4*/run-gram-cogserver.sh
duude if=2502
duude of=5
duude cf=bf
duude lf=8a3b must mst set ISIG ICANON ECHO

duude if=22402 must set ICRNL IXON IUTF8
duude of=5
duude cf=277
duude lf=105073

duude if=42400

------------------
Sexpr::decode_value
RocksStorage::getKeys
------------------

After triming, 1 words left, out of 10
echo $GRAM_CLUSTER | nc $HOSTNAME $PORT

       (define gca (make-gram-class-api))
       (define gcs (add-pair-stars gca))
       (define gcf (add-wordclass-filter gcs))
after clustering do
(gca 'fetch-pairs)

(define cset-obj (make-pseudo-cset-api))
(define psa (add-pair-stars cset-obj))
(define asc (add-singleton-classes psa))
(asc 'create-hi-count-singles 1)

       (batch-all-pair-mi gcf)

(gcs 'left-basis)
(gcf 'left-basis)
(length (gcf 'right-basis))

(length (gcf 'right-duals (WordClassNode "squirrel dog")))
(length (gcf 'right-stars (WordClassNode "squirrel dog")))

(batch-all-pair-mi gcf)

(use-modules (opencog nlp lg-export))
   (export-csets gcf "dict.db" "EN_us")


monitor-parse-rate

        modified:   depcomp
        modified:   install-sh
        modified:   missing

commit dfc4362417bf9aa3468a29360681f13f76949ac6
$(libguile_dbi_la_LINK)

libguile_dbi_la_LDFLAGS = -export-dynamic -version-info 2:6:0
libguile_dbi_la_LDFLAGS = -export-dynamic -version-info @DBI_INTERFACE@

src/guile-dbd-mysql.c:120

<UNKNOWN-WORD>|<UNKNOWN-WORD.5>|<a the>
<UNKNOWN-WORD>|<UNKNOWN-WORD.6>|<squirrel dog>
<UNKNOWN-WORD>|<UNKNOWN-WORD.7>|<saw chased>

LEFT-WALL.2 <UNKNOWN-WORD.5> squirrel.3 a.1 <UNKNOWN-WORD.6>

Many duplicates!!!!
<###LEFT-WALL####uni>|TB+ & TB+|-2.58496250072116
<a the>|TD- & TC- & TB- & TE+|-1.58496250072116
<a the>|TB- & TE+|-1.58496250072116
<squirrel dog>|TE-|-1.58496250072116
<squirrel dog>|TE- & TF+ & TC+|-1.58496250072116
<saw chased>|TF- & TD+|-2.58496250072116

The duplicate are because the connectors were never
consolidated into classes.

cset-to-lg-dj
unique

export-dictionary.scm
LG_DICT_EXPORT
EN_us


linkparser> the squirrel a dog
Found 1 linkage (1 had no P.P. violations)
        Unique linkage, cost vector = (UNUSED=0 DIS=-8.92 LEN=2)

     +-----------TB-----------+
     +---TB---+---TE---+      +-TE-+
     |        |        |      |    |
LEFT-WALL.2 the.1 squirrel.3 a.1 dog.3

linkparser> the squirrel saw a dog
Found 1 linkage (1 had no P.P. violations)
        Unique linkage, cost vector = (UNUSED=0 DIS=-11.51 LEN=4)

     +--------------TB--------------+
     |                 +-----TC-----+
     +---TB---+---TE---+---TF--+-TD-+-TE-+
     |        |        |       |    |    |
LEFT-WALL.2 the.1 squirrel.3 saw.4 a.1 dog.3

$ ~/src/learn/run/3*/run-mst-cogserver.sh
(define (prt-atom h) (display h) #f)
(cog-map-type  prt-atom 'WordNode)

(WordNode "###LEFT-WALL###" (ctv 1 0 4800))
(WordNode "saw" (ctv 1 0 2400))
(WordNode "the" (ctv 1 0 4800))

(cog-incoming-set (WordNode "###LEFT-WALL###"))

(define ala (make-any-link-api))
(define asa (add-pair-stars ala))
(define als (add-support-api asa))
(define alf (add-pair-freq-api als))

(ala 'fetch-pairs)
(ala 'pair-count (WordNode "###LEFT-WALL###") (WordNode "the"))

(alf 'help)
,d add-pair-freq-api
(alf 'left-count (WordNode "the"))
(alf 'wild-wild-count)
(alf 'pair-fmi (alf 'get-pair (Word "###LEFT-WALL###") (Word "the")))

FMI's:
wall-the 1.411
(alf 'get-pair (Word "###LEFT-WALL###") (Word "saw")) none-such!

(als 'get-all-elts)
(als 'right-stars (Word "###LEFT-WALL###"))
(als 'right-duals (Word "###LEFT-WALL###"))

Why only the determiners? Was this filtered!? No ... then what?

link-pipeline.scm
(define phr (Phrase "the dog chased the cat"))
(define lgn (LgParseMinimal phr (LgDict "any") (Number 24)))
(define sent (cog-execute! lgn))
(sentence-get-parses sent)

(define parse (list-ref (sentence-get-parses sent) 12))
(parse-get-links parse)

1:
wall-the
the-dog
dog-chase
chase-the
the-cat

(for-each
	(lambda (parse)
		; (format #t "parse ~A" parse)
		(for-each
			(lambda (link)
				(if (equal? (WordNode "###LEFT-WALL###")
						(word-inst-get-word (gadr link)))
					(if (and
							(not (equal? (WordNode "the")
								(word-inst-get-word (gddr link))))
							(not (equal? (WordNode "dog")
								(word-inst-get-word (gddr link)))))
						(format #t "its ~A ~A"
							(word-inst-get-word (gddr link)) parse))))
			(parse-get-links parse)))
	(sentence-get-parses sent))

Hmm parse #156 is the first parse that links to "dog"
parse #225 first to link to chased
#393 first to link to "cat"

total of 1162 linakges so this sampling is extremely non-random!

and no parses link elsewhere. OK this was a bug in LgParseLink
and was fixed.

No LEFT-WALL is being exported .. why?
Oh, need to import disjuncts .. fixed.

--------
expt-12 works but then
guile-gram-fake> Done clustering
Rocks: initial aid=441673   <<<<<<<<< wow that's pretty big... too big!?
Support: found num left= 2 num right= 27798 in 7 secs
Total count N(*,*) = 372848.5999
...

Done storing 2 right-wilds in 0 secs
Done saving -log P(x,*) and P(*,y)
Going to compute and store individual pair MI.
Backtrace:
In srfi/srfi-1.scm:
   586:29 19 (map1 (# # # # # # # # # # # # # # # # # # # # # # # # …))
In opencog/matrix/compute-mi.scm:
   345:56  1 (do-one-pair #)
In unknown file:
           0 (cog-value-ref #f 0)

ERROR: In procedure cog-value-ref:
In procedure cog-value-ref: Wrong type argument in position 1 (expecting opencog value): #f
Failure exporting the dictionary!

guile -l ~/src/learn/run-common/cogserver.scm

(define gca (make-gram-class-api))
(gca 'fetch-pairs)
(define gcs (add-pair-stars gca))

(define gcf (add-wordclass-filter gcs))
(define frqobj (add-pair-freq-api gcf #:nothrow #t))

(define left-item (WordClassNode "b f"))
(define right-item (ConnectorSeq
  (Connector (WordNode "d") (ConnectorDir "-"))
  (Connector (WordNode "a") (ConnectorDir "+"))))

(define lipr (gca 'get-pair left-item right-item))
(define pr-freq (frqobj 'pair-freq lipr))


Ah hah frequencies missing on gcf. make-compute-freq
.. turns out no, counts are missing.

batch-all-pair-mi clready does
(define freq-obj (make-compute-freq wild-obj)) at line 573
line 620 is (freq-obj 'init-freq)

prints
Done computing 30026 pair frequencies in 3 secs so wtf ... line  624
called (freq-obj 'cache-all-pair-freqs)
MI starts line 645
Jumps to line 297

(define supobj (add-support-api gcf))

(cog-keys lipr) shows no keys. ... not even a TV ...!?

(define mcf (make-compute-freq gcf))

line 258...
do it by hand (mcf 'cache-all-pair-freqs) .. fails... at line 232
 (for-each right-loop (wldobj 'left-basis))

where wildobj == gcs
so line 227 fails... (cache-pair-freq lipr) ... line 203
(compute-pair-freq  at line 189 fails cause no count on the item.

why does lipr not have a TV on it???

How many (gcs 'right-stars left-item) are missing keys?

(use-modules (srfi srfi-1))
(fold
	(lambda (star cnt)
		(if (nil? (cog-keys star)) (+ 1 cnt) cnt))
		0
		(gcs 'right-stars left-item))

answer 998 of them! out of 45186 .. how?

Oh. Use nil? not null?
Use nil? not null? for cog-value-ref; it returns #f or '()
fixed in f29b3dc52 opencog/atomspace

Try again.

. config/3*sh
guile -l ~/src/learn/run-common/cogserver.scm

(define cset-obj (make-pseudo-cset-api))
(define star-obj (add-pair-stars cset-obj))
(cset-obj 'fetch-pairs)

(define right-item (ConnectorSeq
  (Connector (WordNode "d") (ConnectorDir "-"))
  (Connector (WordNode "a") (ConnectorDir "+"))))

(star-obj 'left-stars right-item)
There are 10 of these.

All of these have counts on them. So it was the classifier
that busted things.
mpg_parse.rdb has MM^T on it but no support, no MI

. config/4*sh
guile -l ~/src/learn/run-common/cogserver.scm

(star-obj 'left-stars right-item)
Only one is left.

Try (gram-classify-greedy-discrim 0.5 4) see what happens...
(gcs 'left-stars right-item)
has two items, both have counts.

try again, manually.
(gram-classify-greedy-fuzz 0.65 0.3 4)

(define gca (make-gram-class-api))
(define gcs (add-pair-stars gca))

(gcs 'left-stars right-item)
has two items, both have counts.
(Section (ctv 1 0 683) (WordClassNode "b f")
(Section (ctv 1 0 1340) (WordClassNode "e j")


wtf ... was there a store problem?
yes ... exit server, close, re-open, have no TV on
(Section (WordClassNode "b f")

why not? Is this a rocks bug or a script bug?

(cog-rocks-open "rocks:///home/ubuntu/data/expt-12/gram-4.rdb")
(cog-rocks-get "l@(Section (WordClassNode \"b f\")(ConnectorSeq (Connector (WordNode \"d\")(ConnectorDir \"-\"))(Connector (WordNode \"a\")(ConnectorDir \"+\"))))")
(cog-rocks-get "k@rXg1") ... returns nothing.
even after immediately computing things.
So it was never saved...!?

need to
(gcs 'store-aux)  ??? This doesn't fix it.

(gram-classify greedy-over-words (make-fuzz

make-fuzz stores some stuff...
... seems to store the revised marginals on the words and the class
what about the section itself?
gram-projective.scm

explicit store works.

(define gca (make-gram-class-api))
(define gcs (add-pair-stars gca))
(define gco (make-store gcs))
(gco 'store-all)


with explicit store:
select count(*) from disjuncts; 1754
without explicit store:
1530

clustered exported db generates no sentences.
non-clustered db works.

clustered db is missing left-wall. Why?

(define gca (make-gram-class-api))
(define gcs (add-pair-stars gca))
(gcs 'fetch-pairs)

(define (prt-atom h) (display h) #f)
(cog-map-type prt-atom 'Word)
(cog-map-type prt-atom 'WordClass)
No uni for left wall?

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))
(psa 'fetch-pairs)
(define asc (add-singleton-classes psa))
(asc 'create-hi-count-singles 1)
After trimming, 9 words left, out of 11
Created 0 singleton word classes

so no keys on left-wall
(use-modules (srfi srfi-1))
(define lw (WordNode "###LEFT-WALL###"))
(length (cog-incoming-set lw))  ; 19887
(list-ref (cog-incoming-set lw) 2)
(cog-keys (list-ref (cog-incoming-set lw) 333)) ; None!!! wtf!
for gram-5, at least ...

... but mpg_parse does have counts on left-wall.
How did they disappear?

issue: failed to wait for cogserver to finish loading.
2-word-pairs/run-all.sh
3-mst-parsing/run-all-mst.sh
4-gram-class/run-all-gram.sh
all-in-one.sh

echo -e "(block-until-idle 0.01)\n.\n."

another issue: export prints
Going to compute and store individual pair MI.

but that's a lie, its never stored... no, ok, it just doesn't
do the progress prints, that's all...
DO-STORE is true...
... huh, claims it is stored... is it?
so, yeah they are there...

but wait ..
(gcs 'left-stars right-item)
shows that some unis have no counts...
wtf
 again, done in gram-7
now export-7


(define gca (make-gram-class-api))
(define gcs (add-pair-stars gca))
(define right-item (ConnectorSeq
  (Connector (WordNode "d") (ConnectorDir "-"))
  (Connector (WordNode "a") (ConnectorDir "+"))))

(gcs 'left-stars right-item)
only two items, they have counts but no MI's on them.

(use-modules (srfi srfi-1))
(fold
	(lambda (star cnt)
		(if (nil? (cog-keys star)) (+ 1 cnt) cnt))
		0
		(gcs 'get-all-elts)) ; 0 OK everything has a count. good

(length (gcs 'get-all-elts))  ; 93056

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))
(psa 'fetch-pairs)
(length (psa 'get-all-elts)) ; 32383

(fold (lambda (star cnt)
      (if (nil? (cog-keys star)) (+ 1 cnt) cnt))
      0 (psa 'get-all-elts))
; 9869
ok that's broken, but maybe from the earlier breakages.
Need rerun from scratch.

After re-running from scratch, get
(length all ...; 90809
(fold ... ; 26245
for the fold. Are these the zero-count disjuncts!? why aren't they
deleted? WTF??

for gcs: 94984 total elts, and 25329 without counts...
-----------
try to figure it out. expt-13
cp -pr mpg_parse.rdb gram-2.rdb

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))
(psa 'fetch-pairs)

(use-modules (srfi srfi-1))
(length (psa 'get-all-elts))  ;134089
(fold; 0 very good.

cluster
(gram-classify-greedy-fuzz 0.65 0.3 4)

(length (psa 'get-all-elts)) ;32625 wow big drop but expected OK
(fold ; 0 so still good!

(define pca2 (make-pseudo-cset-api))
(define psa2 (add-pair-stars pca2))
(length (psa2 'get-all-elts)) ; 32625 OK consistent
(fold ; 0 still good.

((make-store (make-gram-class-api)) 'store-all)

close, restart cogserver load.
(length (psa 'get-all-elts)) ; 32625 OK, no change

(use-modules (srfi srfi-1))
(fold (lambda (star cnt)
      (if (nil? (cog-keys star)) (+ 1 cnt) cnt))
      0 (psa 'get-all-elts))

fold ; 9685
OK, so ... TV's disappeared. How?

------
gram-3

(use-modules (srfi srfi-1))
(fold (lambda (star cnt)
      (if (nil? (cog-keys star)) (+ 1 cnt)
			(if (nil? (cog-value star (Predicate "*-TruthValueKey-*")))
				(+ 1 cnt) cnt)))
      0 (psa 'get-all-elts))

0 -- so they all have TV's.

(gram-classify-greedy-fuzz 0.65 0.3 4)
(fold ; -- still zero.

((make-store psa) 'store-all)

close, reopen.
(length (psa 'get-all-elts)) ; 32625 OK good.

fold ; 0 Yayyy! well, that solves that!

------
gram-4b

LEFT-WALL c d g
LEFT-WALL j f j
LEFT-WALL h a a
LEFT-WALL b b h
LEFT-WALL c e d
LEFT-WALL j c g
LEFT-WALL a j f
LEFT-WALL g j b
LEFT-WALL d a b
LEFT-WALL f d a
LEFT-WALL f g d
LEFT-WALL f j g
LEFT-WALL f g b
LEFT-WALL c b e
LEFT-WALL b a h
LEFT-WALL d b b
LEFT-WALL a h c
LEFT-WALL e f c
LEFT-WALL j b d

     +-------TB------+
     |       +---TC--+
     +---TB--+-TE+-TD+
     |       |   |   |
LEFT-WALL.2 c.1 d.3 g.1

     +-------TB------+
     +---TB--+-TE+-TD+
     |       |   |   |
LEFT-WALL.2 c.1 d.3 g.1

     +-------TB------+
     +-----TH----+   |
     +---TB--+-TE+-TD+
     |       |   |   |
LEFT-WALL.2 c.1 d.3 g.1

j f j is swapped B-H and D-E


./gen-dict.scm ../run-config/1-dict-conf.scm foo

(base-26 n #t)

~/src/learn/run/5-compare/dict-comp.scm fake-lang learned-gram-4c fake-corpus/corpus-3.txt


---------------------
add-linkage-filter

cset-class.scm: -- merges, but no define-public
   connector-seq-compare .. its dead code...
gram-agglo.scm:
gram-projective.scm:
shape-vec.scm:

(load "/home/ubnutu/src/learn/scm/cset-class.scm")

Who writes MemberLinks? gram-projective.scm does ...
so does gram-class-api.scm ...

merge-project only does the sections, not shapes.  Why not?
I think it could. It creates the new sections directly... thats a bug.

What is merge-discrim?

(define wsv (make-shape-vec-api))
(wsv 'fetch-pairs)
(define wss (add-pair-stars wsv))
(wss 'left-basis-size)
((add-support-compute wss) 'cache-all)

(define wst (batch-transpose wss))
(wst 'mmt-marginals)

(define s (EvaluationLink
  (PredicateNode "*-word-shape pair-*")
  (WordNode "!")
  (EvaluationLink
    (PredicateNode "*-shape-*")
    (WordNode "d")
	 (Connector (WordNode "d") (ConnectorDir "-"))
    (Connector (WordNode "b") (ConnectorDir "-"))
    (Connector (WordNode "e") (ConnectorDir "-"))
    (Connector (WordNode "b") (ConnectorDir "-"))
    (Connector (WordNode "a") (ConnectorDir "+"))
    (Connector (VariableNode "$connector-word") (ConnectorDir "+")))))

(wss 'left-stars s)

(cog-atom? x)

f-left-star-pat
'left-star-pattern

((add-support-compute wss) 'cache-all)
Finished left norm marginals in 271 secs
Finished left totals in 34 secs

Finished left norm marginals in 1295 secs
duude failure not atom at 92387 of 101856

(define e (WordNode "e"))
(define sa (EvaluationLink
    (PredicateNode "*-shape-*")
    (WordNode "a")
    (Connector
      (WordNode "e")
      (ConnectorDir "-"))))
(wsv 'get-pair e sa)


no stars for .... cause its not an item, its a pair!
(wss 'left-basis)
(define s (car (wss 'right-basis)))
(wss 'left-stars s)
(cog-incoming-set pair-pred)

(WordNode "d")
(define rs (wss 'right-stars (WordNode "d")))
92387 of 101856
(list-ref rs 92387)

(define var (Variable "$api-right-star"))
(define term (wss 'make-pair (WordNode "d") var))
(define b (Bind (TypedVariable var (Type "EvaluationLink")) term term))
(use-modules (opencog exec))
(define setl (cog-execute! b))
(define o (cog-outgoing-set setl))
(list-ref o 92387)

(define term
(EvaluationLink
  (PredicateNode "*-word-shape pair-*")
  (WordNode "d")
  (VariableNode "$api-right-star")))

which is wrong.  .

(cog-incoming-set term)

Doesn't happen when fresh.
(length o) ; 101855 insead of 101856

(for-each (lambda (atm) (if (equal? atm term) (format #t "yes its here\n")))
	o)


(all-left-marginals)
(maybe-par-for-each set-left-marginals (star-obj 'right-basis))

(define wsc (add-support-compute wss))
(for-each (lambda (atm) (wsc 'set-left-marginals atm))
		 (wss 'right-basis))
still good. so OK.
	(wsc 'total-support-left)
still OK
	(wsc 'total-count-left)
still OK

(define wap (add-support-api wss))
(wap 'set-left-totals
	(wsc 'total-support-left)
	(wsc 'total-count-left))
still OK

(wsc 'all-left-marginals)
still OK ...
so wtf is going on??

----
(for-each (lambda (atm) (wsc 'set-right-marginals atm))
		 (wss 'left-basis))
and its kaboom.
duude failure not atom at 11440 of 39214
duude wtf right fail for (WordNode "b")

although the bindlink is OK still.
----
(define wsv (make-shape-vec-api))
(wsv 'fetch-pairs)
(define wss (add-pair-stars wsv))
(wss 'left-basis-size)

(define wsc (add-support-compute wss))
(for-each (lambda (atm) (wsc 'set-right-marginals atm))
       (wss 'left-basis))
duude failure not atom at 92387 of 101856
 so very reproducible. Not raceey

Direct:
(define wsv (make-shape-vec-api))
(wsv 'fetch-pairs)
(define wss (add-pair-stars wsv))
(wss 'left-basis-size)

(define var (Variable "$api-right-star"))
(define term (wss 'make-pair (WordNode "d") var))
(define b (Bind (TypedVariable var (Type "EvaluationLink")) term term))
(use-modules (opencog exec))
(define setl (cog-execute! b))
(cog-arity setl) ; 36320 ... wtf!? ohh, bug
(define o (cog-outgoing-set setl))
(length o) ; 101856 .. wtf!?

(list-ref o 92387) ; borken...

/* Arity is currently an unsigned short */ uhh ohhh

QueryLink::do_execute
   Implicator impl(as);
   impl.implicand = this->get_implicand();
   impl.satisfy(PatternLinkCast(get_handle()));

QueueValuePtr
ohhh nooo 26915
ohhh nooo 4473
ohhh nooo 623

ohhh nooo 10725
OK
ohhh nooo 4358
But (list-ref o 92387) is still the location of the baddie!?
OK
4555 atomic
4382/4474/28622
4402/33396
4286/8018

report_grounding

bool have_var=false;
for (const auto& j: var_soln) {
Handle var(j.first);
Type vtype = var->get_type();
if (VARIABLE_NODE == vtype) have_var = true;
}
if (not have_var) printf("duuude missing var grounding on %d\n", cnt.load());


duuude FINITO var grounding at gnt=4106
[FINE] ==================== FINITO! accepted= 0
[FINE] There are groundings for 1 terms
[FINE] Groundings for 0 variables:
[FINE] Groundings for 0 clauses:
[FINE] xxxxxxxxxx neighbor_search xxxxxxxxxx
       Loop candidate (4554/108680):

incomplete search.

Normally:
Loop candidate
Clause is matchable; start matching i -- explore_clause_direct
duuude FINITO var grounding at gnt=11121
duuude FINITO var grounding at gnt=22310
duuude FINITO var grounding at gnt=22377

insert into NACK .. all of them.
cache hit -- the four failures!

search: nserting into cache -- each and every one.
search: no key must explore -- zero hits in good or bad.

cahce hit:term is clause, grnd is the variable. chached val is clause

Q: why is var not writtten!?
Q: why is it erratic? A: because neighbor-search is not in consistent
order.
_search_set at line 1096  is a HandleSeq
from _start_choices
get_incoming_set
TermMatchMixin.cc line 473

wow when sorted, its 345 baddies.
why does the number of hits vary?

weird: _pat->clause_variables.at() seems to ctonain terms... line 1964
or not..

const HandleSeq& clvars(_pat->clause_variables.at(pclause));
      size_t cvsz = clvars.size();
if (1 == cvsz and
const Handle& jgnd(var_grounding.at(clvars[0]));
key = HandleSeq({clause_root, jgnd});

$- f- h+ g+ a+

So... explore ... find, fail, insert into nack.

there are 101855 reported,
there are 108680 in loops
there are 108335 nacks (which with 345 hits add up.)

there are 101855 cache insertions.
there are 102200 FINITO's (= 101855 + 345)

all the rest are shapes
(length (cog-incoming-set (PredicateNode "*-shape-*")))
510993 wow.
(length (cog-incoming-set (PredicateNode "*-word-shape pair-*")))
620436
(length (cog-incoming-set (WordNode "d")))
110908  ; ok that is the thinnest.
(length (cog-incoming-by-type (WordNode "d") 'EvaluationLink))
108680 ; ok that's the loop, then.  and clearly some of these are
shapes.

why are there no nacks, despite nack insertiions?
why are there no "no keys"? Because the clause is always cacheable.

Yow. That was hard work. Fixed in https://github.com/opencog/atomspace/pull/2803

-------------------------------------------
So, where were we?

(define wsv (make-shape-vec-api))
(wsv 'fetch-pairs)
(define wss (add-pair-stars wsv))
(wss 'left-basis-size)
((add-support-compute wss) 'cache-all)

(define wst (batch-transpose wss))
(wst 'mmt-marginals)

Holy cow:
Stored 40000 of 510993 left-wilds in 101 secs (396 pairs/sec)
Stored 80000 of 510993 left-wilds in 356 secs (112 pairs/sec)
Stored 120000 of 510993 left-wilds in 607 secs (66 pairs/sec)
Stored 160000 of 510993 left-wilds in 865 secs (46 pairs/sec)
Stored 200000 of 510993 left-wilds in 1075 secs (37 pairs/sec)
Stored 240000 of 510993 left-wilds in 1352 secs (30 pairs/sec)
Stored 280000 of 510993 left-wilds in 1591 secs (25 pairs/sec)
Stored 320000 of 510993 left-wilds in 1841 secs (22 pairs/sec)
Stored 360000 of 510993 left-wilds in 2076 secs (19 pairs/sec)
Stored 400000 of 510993 left-wilds in 2296 secs (17 pairs/sec)
Stored 440000 of 510993 left-wilds in 2584 secs (15 pairs/sec)
Stored 480000 of 510993 left-wilds in 2871 secs (14 pairs/sec)
Done storing 510993 left-wilds in 19969 secs
freaking disaster.

try again with postgres!?

open mpg_parse.rdb and load all of it then save to postgres

. config/0*h
. config/3*h
guile -l ~/src/learn/run-common/cogserver.scm

(load-atomspace)
(cog-close storage-node)
(use-modules (opencog persist-sql))
(sql-create "postgres:///expt_16_shape")
(sql-open "postgres:///expt_16_shape")
(store-atomspace)
^D

        Stored 100K atoms in 377 seconds (265 per second)
        Stored 200K atoms in 720 seconds (277 per second)
        Finished storing 232500 atoms total, in 833 seconds (279 per second)

vi config/3*h  use postgres

(define wsv (make-shape-vec-api))
(wsv 'fetch-pairs)
Elapsed time to load word sections: 39 seconds
Elapsed time to load word-shape pairs: 0 seconds
Elapsed time to create shapes: 31 secs

vs. Rocks:
Elapsed time to load word sections: 7 seconds
Elapsed time to load word-shape pairs: 0 seconds
Elapsed time to create shapes: 35 secs

So postgres had 6x slower load, at least the first time...
Ouch. But .... if we use Rocks to open the shape db which
has the shapes in it, then disaster strikes:

Elapsed time to load word sections: 112 seconds

What if we do the same for postgres?
Elapsed time to load word sections: 29 seconds
so it's actually a little faster than it was the first time...


(define wss (add-pair-stars wsv))
(wss 'left-basis-size)
((add-support-compute wss) 'cache-all)

Finished left norm marginals in 184 secs
Finished left totals in 8 secs
Finished right norm marginals in 28 secs
Finished right totals in 0 secs

vs rocks:
Finished left norm marginals in 189 secs
Finished left totals in 9 secs
Finished right norm marginals in 29 secs
Finished right totals in 0 secs

So identical, here.

(define wst (batch-transpose wss))
(wst 'mmt-marginals)

Finished mmt norm marginals in 66 secs
Finished mmt totals in 0 secs
Done storing 12 right-wilds in 0 secs
Stored 40000 of 510993 left-wilds in 170 secs (235 pairs/sec)
Stored 80000 of 510993 left-wilds in 168 secs (238 pairs/sec)
Stored 120000 of 510993 left-wilds in 188 secs (213 pairs/sec)
Stored 160000 of 510993 left-wilds in 177 secs (226 pairs/sec)
Stored 200000 of 510993 left-wilds in 171 secs (234 pairs/sec)
Stored 240000 of 510993 left-wilds in 165 secs (242 pairs/sec)
Stored 280000 of 510993 left-wilds in 164 secs (244 pairs/sec)
Stored 320000 of 510993 left-wilds in 176 secs (227 pairs/sec)
Stored 360000 of 510993 left-wilds in 163 secs (245 pairs/sec)
Stored 400000 of 510993 left-wilds in 189 secs (212 pairs/sec)
Stored 440000 of 510993 left-wilds in 187 secs (214 pairs/sec)
Stored 480000 of 510993 left-wilds in 185 secs (216 pairs/sec)
Done storing 510993 left-wilds in 2246 secs

vs rocks:
Finished mmt norm marginals in 50 secs
Finished mmt totals in 0 secs
Done storing 12 right-wilds in 0 secs
...
Done storing 510993 left-wilds in 19969 secs

so here, where it matters, postgres is 9x faster,
running in 37 minutes instead of 5.5 hours. Sheesh.
Why is this shit so slow?

Oh, hang on: redoing the above on Rocks, where the
Atoms and Values are already there, i.e. writing out
exactly the same data as what is there, gives a whole new result:

...
Stored 440000 of 510993 left-wilds in 3 secs (13333 pairs/sec)
Stored 480000 of 510993 left-wilds in 4 secs (10000 pairs/sec)
Done storing 510993 left-wilds in 43 secs

Wow! This suggests that the first time, maybe Rocks was recomputing
some index with each and every store?

Try this with postgres: (i.e. re-store exactly the same data)
... and that. too, is ... faster!  Go figure!?
...
Stored 440000 of 510993 left-wilds in 38 secs (1053 pairs/sec)
Stored 480000 of 510993 left-wilds in 38 secs (1053 pairs/sec)
Done storing 510993 left-wilds in 500 secs

so that is 5x faster than the initial store. The magic of indexing.

BTW, a rocks DB holding 750K atoms takes abuot 605M bytes
so that works out to under 1KBytes per atom. So more compact than
the in-RAM storage!

-----------------------------------------------------

Concatenation of vectors.
(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))
(psa 'fetch-pairs)
Elapsed time to load csets: 292 secs
(length (psa 'get-all-elts)) ; 80807  so 277 atoms/sec

(define wsv (make-shape-vec-api))
(define wss (add-pair-stars wsv))
(wsv 'fetch-pairs)
Elapsed time to load word sections: 110 seconds
Elapsed time to load word-shape pairs: 0 seconds
Elapsed time to create shapes: 31 secs

XXX why is it creating? Aren't they already there?

(length (wss 'get-all-elts)) ; 620435

(psa 'right-basis-size) ; 75667
(wss 'right-basis-size) ; 510993

(load "/tmp/c.scm")

(define cac (direct-sum psa wss))
(cac 'right-basis-size) ; 586660 yay

(length (cac 'get-all-elts)) ; 701242 = 80807 + 620435 yes, good

-----------------------
Detour:
Verify therading/locking behavor for batch-similarity.
With rocks.

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))
(psa 'fetch-pairs)
(define sim (batch-similarity psa #f))
(sim 'batch-compute 12)
Done 10/12 Frac=47.69% Time: 71 Done: 98.5% Rate=0.915 prs/sec (1.092 sec/pr)

again a few more times, for a baseline:
Done 10/12 Frac=  0.0% Time: 58 Done: 98.5% Rate=0.586 prs/sec (1.706 sec/pr)
Done 10/12 Frac=  0.0% Time: 51 Done: 98.5% Rate=0.667 prs/sec (  1.5 sec/pr)
Done 10/12 Frac=  0.0% Time: 50 Done: 98.5% Rate= 0.68 prs/sec (1.471 sec/pr)

(sim 'parallel-batch 12 2)

Fuu not enough to report.  Do the left instead.
(define lim (batch-similarity psa #t))
(lim 'batch-compute 300)
Time: 41
Time: 17
Time: 17

(lim 'batch-compute 500)
Time: 103
Time: 63
Time: 64

(lim 'parallel-batch 500 2)
Time: 67

(lim 'parallel-batch 500 3)
Time: 71

(lim 'parallel-batch 500 4)
Time: 70

(lim 'parallel-batch 500 8)
Time: 72

(lim 'parallel-batch 500 16)
Time: 72

(lim 'parallel-batch 1000 8)
Time: 563

OK, so guile-3.0.1-deb+1-2 offers no improvement at all.
Bummer.
-----------------------
OK back to work.

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))
(psa 'fetch-pairs)

(define wsv (make-shape-vec-api))
(define wss (add-pair-stars wsv))
(wsv 'fetch-pairs)

(define cac (direct-sum psa wss))

(define csc (add-pair-stars cac))

Then do run-common/marginals-mst.scm i.e. do

(define cuc (add-support-compute csc))
(cuc 'cache-all)
... but that won't work, it runs at 1.3 columns/sec
... for 586660 entries it will take 4.5 days
but 'all-right-marginals is fast: 49 seconds.
OK, that was a caching bug. Now runs at 2K/sec
total time of 405 secs.

for each right (i.e. for each dj) do:
    sum over left-stars for that dj. ....
       finding the left-stars is slow... why, again?

(define dj (list-ref (csc 'right-basis) 42))  ; is a dj
(csc 'left-stars dj)

get-internal-run-time

(api-obj (add-support-api star-obj))
calls
(set-norms (LLOBJ 'left-wildcard ITEM) L0 L1 L2))

(define sns (get-internal-run-time))
(define wild (LLOBJ 'left-wildcard ITEM))
(define ens (get-internal-run-time))
(format #t "get-wild took ~5f millis\n" (/ (- ens sns) 1000000.0))

Foo, do we actually need left marginals, or are we just spewing CPU time?


((make-central-compute csc) 'cache-all)
((make-central-compute csc) 'cache-total)

Above isn't needed, the batcher does all this, yeah!?
run-common/marginals-mst.scm does them .. why?
((add-support-compute psa) 'cache-all)
((make-central-compute psa) 'cache-total)


(define btc (batch-transpose csc))
(btc 'mmt-marginals)
(print-matrix-summary-report cac)


(gram-classify-greedy-fuzz csc 0.65 0.3 4)
(gram-classify-greedy-disinfo csc 3 4)

... make-disinfo uses make-pseudo-cset-api and we don't want that...

if does use dynamic-stars...

(current-time)
start-time

similari

elapsed-count
(define elapsed-secs (make-elapsed-secs))

((make-store (make-pseudo-cset-api)) 'store-all)
((make-store (make-gram-class-api)) 'store-all)

hang on... (make-store cac) will work


(cac 'right-type)
(cac 'pair-type

 (if (LLOBJ 'provides 'make-left-stars)
            (LLOBJ 'make-left-stars))


who fetchess marginals? forgot to do that on direct-sum! FIXED
(PredicateNode (string-append "*-Direct Sum Wild " id-string))

--------------------
start again.

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))

(define wsv (make-shape-vec-api))
(define wss (add-pair-stars wsv))

(define cac (direct-sum psa wss))
(define csc (add-pair-stars cac))
(csc 'fetch-pairs)

(define btc (batch-transpose csc))
(btc 'mmt-marginals)
(print-matrix-summary-report csc)
((make-store csc) 'store-all)  ; ... is this needed? Its slow!

(print-matrix-summary-report csc)
(gram-classify-greedy-disinfo csc 3 4)
(gram-classify-greedy-discrim csc 0.5 4)



(define csr (add-report-api csc))
(csr 'num-pairs)

(define ww (csc 'wild-wild)) .. got nothing... did btc not store it?

Hmmm fresh start; only keys on ww are MMT product key

(define support-obj (add-support-api csc))
(support-obj 'total-support-left)
*unspecified*
	(throw 'bad-summation 'compute-total-entropy

link-generator -l learned -c 123123123 -s 3

LEFT-WALL e a !
LEFT-WALL e a !
LEFT-WALL j a !
LEFT-WALL a h !
vs

LEFT-WALL j d !
LEFT-WALL j b !
LEFT-WALL j a !
LEFT-WALL j j !
LEFT-WALL j e !

generator is under-generating...
j a ! has three linkages, only one generated.
e a ! "  "

oh, I see all three are the same ... but there are supposed to be no
synonyms, but accidentall there are... where are there accidental synonyms?
Hmm.
Answer: because word-classes list muultiple poses, and the poses are
effectiely synonym classes. So.... we're not really generating langs
correctly. Shoot.

But also, given the dict, we're also not generating the full corpus,
either; we're generating a corpus that is too small.
---
wild-wild-count
left-element

verify clustering

--- To-do=11 ncls=0 sing=1 nredo=0 2021-03-31 00:06:54 -- "j" ---
Dist=0.9553 for word "e" -- "j" in 30.10 secs
---------Bingo! Dist=0.9553 for word "e" -- "j"
---------Merged 201883 sections in 1102. secs; 183.22 scts/sec
--- Greedy-checking next 10 items

(cog-get-atoms 'WordClassNode)
(define ie (cog-incoming-by-type (WordClass "e j") 'Evaluation))
(length ie) ; 200115

(define is (cog-incoming-by-type (WordClass "e j") 'Section))
(length is) ; 1768

Holy cow! how many sections and shapes were on e and j to begin with!?

(define ee (cog-incoming-by-type (Word "e") 'Evaluation))
(length ee) ; 124006
(define es (cog-incoming-by-type (Word "e") 'Section))
(length es) ; 1416
(define je (cog-incoming-by-type (Word "j") 'Evaluation))
(length je) ; 108047
(define js (cog-incoming-by-type (Word "j") 'Section))
(length js) ; 1195

Wow There sure are a lot of shapes. A heck of a lot more than ..
expected. Why? Its a hundred-to-one blow-up...

(cog-report-counts)
(Section . 80807)
(EvaluationLink . 1131429)
so 14x more shapes than sections, which seems too much.

overcounting.
(length (cog-incoming-set (PredicateNode "*-shape-*")))
510993  a only 6.3x more

(length (cog-incoming-set (PredicateNode "*-word-shape pair-*")))
 620435  so 7.7x more


(for-each (lambda (wn) (format #t "~A is ~A\n"
(cog-name wn) (length (cog-incoming-by-type wn 'Section))))
(cog-get-atoms 'Word))


a is 21178
d is 2226
g is 591
b is 1212
###LEFT-WALL### is 9113
j is 1195
i is 2113
h is 1558
c is 580
f is 781
e is 1416
! is 38844

(for-each (lambda (wn) (format #t "~A is ~A\n"
(cog-name wn) (length (cog-incoming-by-type wn 'Evaluation))))
(cog-get-atoms 'Word))

a is 177916
d is 108679
g is 9004
b is 42191
###LEFT-WALL### is 122085
j is 108047
i is 14077
h is 40231
c is 33587
f is 40733
e is 124006
! is 310872

How many connectors in a shape? How many connectors in a section?
(use-modules (srfi srfi-1))
(fold (lambda (sec cnt) (+ cnt (cog-arity sec)))
0 (cog-get-atoms 'Section))
; 161614 so double (Section . 80807)

(fold (lambda (sec cnt) (+ cnt (cog-arity (gdr sec))))
0 (cog-get-atoms 'Section))

620435 connectors total, so exactly equal to
(length (cog-incoming-set (PredicateNode "*-word-shape pair-*")))

and averages out to 7.6779858 connectors per section. Wow. That's a lot.
That's huge.

; How many sections of a given length?
(for-each (lambda (ARI)
(format #t "len ~A  secs ~A\n" ARI
(fold (lambda (sec cnt) (if (= ARI (cog-arity (gdr sec))) (+ 1 cnt) cnt))
0 (cog-get-atoms 'Section))))
(iota 20))

len 0  secs 0
len 1  secs 0
len 2  secs 606
len 3  secs 2311
len 4  secs 3723
len 5  secs 5150
len 6  secs 8387
len 7  secs 13907
len 8  secs 17362
len 9  secs 15043
len 10  secs 9061
len 11  secs 4000
len 12  secs 1257
len 13  secs 0
len 14  secs 0

So its not at all zipfian.
(for-each (lambda (ARI)
(format #t "Length= ~A  NSections= ~A\n" ARI
(fold (lambda (sec cnt) (if (= ARI (cog-arity (gdr sec))) (+ 1 cnt) cnt))
0 (cog-get-atoms 'Section))))
(iota 20))

(for-each (lambda (ARI)
(format #t "Length= ~A  NConSeq= ~A\n" ARI
(fold (lambda (sec cnt) (if (= ARI (cog-arity sec)) (+ 1 cnt) cnt))
0 (cog-get-atoms 'ConnectorSeq))))
(iota 15))

(for-each (lambda (ARI)
(format #t "Length= ~A  NSections= ~A\n" ARI
(fold (lambda (sec cnt) (if
(and (= ARI (cog-arity (gdr sec))) (< 4 (cog-count sec)))
(+ 1 cnt) cnt))
0 (cog-get-atoms 'Section))))
(iota 15))


-----------------------

merge-frac does the merging

(use-modules (opencog exec))

(define b
	(Bind
		; (VariableList)
		(And
			(ConnectorSeq
				(Glob "$initial seq")
				(Connector (Word "a") (ConnectorDir "+"))
				(Glob "$final seq"))
			(ConnectorSeq
				(Glob "$initial seq")
				(Connector (Word "b") (ConnectorDir "+"))
				(Glob "$final seq")))
		(ConnectorSeq
			(Glob "$initial seq")
			(Connector (Word "b") (ConnectorDir "+"))
			(Glob "$final seq"))))

(define start-time (current-time))
(define r (cog-execute! b))
(format #t "Elapsed ~A\n" (- (current-time) start-time))
; 700 seconds ! yikes to traverse 75669 connector seqs
(cog-arity r)
; 184 ... 181


(define ca (Connector (Word "a") (ConnectorDir "+")))
(define cb (Connector (Word "b") (ConnectorDir "+")))

(define ca-seq (cog-incoming-by-type ca 'ConnectorSeq))
(define cb-seq (cog-incoming-by-type cb 'ConnectorSeq))
(length ca-seq) ; 10466
(length cb-seq) ; 18342


(define SEQ (list-ref ca-seq 3))

(define init
	(take-while (lambda (CON) (not (equal? ca CON))) (cog-outgoing-set SEQ)))
(define find

(span (lambda (CON) (not (equal? ca CON))) (cog-outgoing-set SEQ))

(define rw
	(cog-link 'ConnectorSeq
		(map (lambda (CON) (if (equal? ca CON) cb CON)) (cog-outgoing-set SEQ))))

(define eq2
	(remove
		(lambda (PR) (null? (cdr PR)))
		(map
			(lambda (SEQ)
				(cons SEQ
					(cog-link 'ConnectorSeq
						(map
							(lambda (CON) (if (equal? ca CON) cb CON))
							(cog-outgoing-set SEQ)))))
			ca-seq)))

(length eq) ; 272

why is this different than (cog-arity r) which is 182?
(length (delete-dup-atoms eq)) ; 262  !! what's duplicated in eq?
(length (keep-duplicate-atoms eq))

(define er (cog-outgoing-set r))
(length (atoms-subtract er eq)) ; 10
(length (atoms-subtract eq er)) ; 91

gram-projective.scm

gram-7-junk.rdb is
(gram-classify-greedy-discrim csc 0.25 4)
----------
Old API

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))

(define wsv (make-shape-vec-api))
(define wss (add-pair-stars wsv))

(define cac (direct-sum psa wss))
(define csc (add-pair-stars cac))
(csc 'fetch-pairs)

Baseline run:
Used 80807 sections to create 620435 x-sections


Start greedy-agglomeration of 12 words
Existing classes=0 singletons=0 done=0
--- To-do=12 ncls=0 sing=0 nredo=0 2021-04-03 19:39:24 -- "e" ---
--- To-do=11 ncls=0 sing=1 nredo=0 2021-04-03 19:39:34 -- "j" ---
Dist=0.9553 for word "e" -- "j" in 22.73 secs
---------Bingo! Dist=0.9553 for word "e" -- "j"
---------Merged 201883 sections in 1272. secs; 158.73 scts/sec
Deleted 2446 sections and 224608 cross-sections tot=228584
l= 121992 lx= 120576   r= 106592 rx= 105397


New code:

---------Merged 201883 sections in 35.73 secs; 5650.6 scts/sec
Deleted 2446 sections and 105397 cross-sections
Deleted 2446 sections and 105397 cross-sections tot=

l= 1416 lx= 0   r= 106592 rx= 105397
all-pairs before=701242 after=593399

ah hah pair A is never a Cross...

(define WA (Word "e"))
(define WB (Word "j"))
(define (bogus a b) (format #t "Its ~A and ~A\n" a b))
(define ptu (add-tuple-math csc bogus))
(define perls (ptu 'right-stars (list WA WB)))
(length perls) ; 201883

(define nxc 0)
(for-each (lambda (spr)
	(define asec (first spr))
	(if (and (not (null? asec)) (eq? (cog-type asec) 'CrossSection))
		(set! nxc (+ 1 nxc))))
	perls)

nxc ; 120576

Ohh is-singleton fails!

(csc 'left-type) ; WordNode

(define (is-singleton-sect? sect)
(define LLOBJ csc)
(eq? (LLOBJ 'left-type) (cog-type (LLOBJ 'left-element sect))))

(any (lambda (spr)
	(define asec (first spr))
	(if (and (not (null? asec)) (eq? (cog-type asec) 'CrossSection)
		(not (is-singleton-sect? asec)))
		(format #t "fail at ~A\n" asec)
		#f))
	perls)

(define fa
(CrossSection (ctv 1 0 1)
  (WordNode "e")
  (ShapeLink
    (WordNode "###LEFT-WALL###")
    (Connector (WordNode "j") (ConnectorDir "+"))
    (Connector (WordNode "j") (ConnectorDir "+"))
    (Connector (WordNode "g") (ConnectorDir "+"))
    (Connector (VariableNode "$connector-word") (ConnectorDir "+"))
    (Connector (WordNode "e") (ConnectorDir "+"))
    (Connector (WordNode "!") (ConnectorDir "+")))))

(csc 'left-element fa) is wrong!


wtf!?  is that even possible!? .. buggy? the new code merges
differently!?

Hmm. OK, so cross-sections are working differently....

Why are the x-sections working differently?

old code:
--- Greedy-checking next 10 items
Dist=0.0545 for class "e j" -- "!" in 36.12 secs
Dist=0.6606 for class "e j" -- "d" in 33.66 secs
---------Bingo! Dist=0.6606 for class "e j" -- "d"
---------Merged 284538 sections in 295.1 secs; 964.13 scts/sec

vs new code:
--- Greedy-checking next 10 items
Dist=   0.0 for class "e j" -- "!" in 10.96 secs
Dist=0.2479 for class "e j" -- "d" in 17.03 secs
Dist=0.0609 for class "e j" -- "a" in 10.83 secs
Dist=   0.0 for class "e j" -- "###LEFT-WALL###" in 9.620 secs
So the new distances are completely different.. wtf!?

Dist=0.3132 for class "e j" -- "a" in 46.02 secs
---------Bingo! Dist=0.3132 for class "e j" -- "a"
---------Merged 355088 sections in 454.0 secs; 782.08 scts/sec
Dist=0.0953 for class "e j" -- "###LEFT-WALL###" in 51.58 secs
Dist=0.6138 for class "e j" -- "b" in 36.79 secs
---------Bingo! Dist=0.6138 for class "e j" -- "b"
---------Merged 383586 sections in 491.6 secs; 780.29 scts/sec
Dist=0.5797 for class "e j" -- "f" in 50.06 secs
---------Bingo! Dist=0.5797 for class "e j" -- "f"
---------Merged 409308 sections in 516.3 secs; 792.78 scts/sec
Dist=0.6088 for class "e j" -- "h" in 57.82 secs
---------Bingo! Dist=0.6088 for class "e j" -- "h"
---------Merged 430864 sections in 601.2 secs; 716.70 scts/sec
Dist=0.6421 for class "e j" -- "c" in 56.41 secs
---------Bingo! Dist=0.6421 for class "e j" -- "c"
---------Merged 449112 sections in 635.7 secs; 706.50 scts/sec
Dist=0.3095 for class "e j" -- "g" in 56.84 secs
---------Bingo! Dist=0.3095 for class "e j" -- "g"
---------Merged 454015 sections in 590.7 secs; 768.54 scts/sec
Dist=0.1362 for class "e j" -- "i" in 49.31 secs
--- Checking the done-list len=0
---- Remaining count = 1372.9 of 694217.0 for "j"
--- To-do=3 ncls=1 sing=0 nredo=9 2021-04-03 21:21:22 -- "!" ---
Dist=0.0865 for class "e j" -- "!" in 83.39 secs
--- To-do=2 ncls=1 sing=1 nredo=9 2021-04-03 21:22:51 -- "###LEFT-WALL###" ---
Dist=0.1064 for class "e j" -- "###LEFT-WALL###" in 66.43 secs
Dist=   0.0 for word "!" -- "###LEFT-WALL###" in 25.67 secs
--- To-do=1 ncls=1 sing=2 nredo=9 2021-04-03 21:24:27 -- "i" ---
Dist=0.1362 for class "e j" -- "i" in 57.25 secs
Dist=0.3250 for word "!" -- "i" in 13.69 secs
---------Bingo! Dist=0.3250 for word "!" -- "i"
---------Merged 76771 sections in 148.1 secs; 518.48 scts/sec
--- Greedy-checking next 0 items
--- Checking the done-list len=9
Dist=0.0001 for class "! i" -- "e" in 8.513 secs
Dist=0.0002 for class "! i" -- "j" in 6.067 secs
Dist=0.0283 for class "! i" -- "d" in 5.023 secs
Dist=0.2085 for class "! i" -- "a" in 6.128 secs
Dist=0.0017 for class "! i" -- "b" in 6.049 secs
Dist=   0.0 for class "! i" -- "f" in 4.532 secs
Dist=0.0008 for class "! i" -- "h" in 5.540 secs
Dist=   0.0 for class "! i" -- "c" in 4.527 secs
Dist=0.0008 for class "! i" -- "g" in 5.029 secs
---- Remaining count = 9567.1 of 24508. for "i"
--- To-do=0 ncls=2 sing=1 nredo=11 2021-04-03 21:29:24 -- "()" ---
Finished greedy-agglomeration: 11 words assigned to 2 classes

--------------------
start again.

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))

(define wsv (add-shape-vec-api psa))
(define wss (add-pair-stars wsv))

(define cac (direct-sum psa wss))
(define csc (add-pair-stars cac))
(csc 'fetch-pairs)

(gram-classify-greedy-discrim csc 0.25 4)

Bad method call on pseudo-cset: get-all-pairs

 (define cls (merge-frac pcos cos-fraction ZIPF WORD-A WORD-B 'WordClass))
329

clobber os pseudo and on shapes ... via provides.../
all-pairs vs get-all-elts

fliter.scm needs a clobber

--------------------------
OK all bugs fixed, all code modernized.
Once again, connector mrging is next.

gram-projective.scm
merge-row-pairs
takes a, b, rowid
sums count and sets it.

cset-merge.scm
(matching-sections CON-A CON-B) return list of pairs

(define monitor-rate (make-rate-monitor))

/home/ubuntu/src/atomspace-rocks/opencog/persist/rocks/RocksIO.cc
:570 well 565

remFromSidList

remin osatom=ShapeLink  - the osatom, from which the xsection to be removed.
reminc satom=2Vy3 (CrossSection
well foo, delete was n=0 r=0 satom=2Vy3 (CrossSection

removeSatom called under lock gaurd mtx_list

writeAtom locks _mtx_sid, then unlocks it before storing incoming
set. .... the write of incoming set is done under _mtx_list
but that is distinct lock.

      std::recursive_mutex _mtx_list;
      std::mutex _mtx_sid;

error in accessing i@
remFromSidList called from
	remIncoming called from
		removeSatom called from
			... already covered
	removeSatom called from
		removeSatom reccurisvely
		removeAtom with mtx_list lock held.

i@ handlers:
	removeSatom with mtx_list held
	getIncomingSet
	writeAtom() with mtx_list held
	remIncoming()

success remFromSidList G1 from i@P:ListLink in tid=13712
in remFromSidList G1 not found in list i@P:ListLink in tid=13709

so incoming is removed first, then the atom
SilentException
NotFoundException

593

OK, revised code:
removeSatom from removeAtom with mtx_list held

writeAtom wries a@ not holding any lock
still get an error  11

rocks: 16 18 18
simple 49 49 47 -- 49
non-simple: 8m3 7m32
pg: 8m12
pg-short: 20 20 20

uhh,
/home/linas/src/novamente/src/atomspace-git/opencog/persist/sql/multi-driver/SQLUUID.cc:133
get_uuid

SQLValues.cc:130
SQLValues.cc:564
SQLAtomStore.cc:124	

./tests/persist/sql/multi-driver/MultiDeleteUTest
again: 50x50 for pg
pg - 31 31 31
rocks - 24 18 28 20 34

again 50x500 no barrier
cog-sim 39 39
cog-sto - 12 13 12

50x50 no barrier
rocks 17 27 no has dbg in it.
rocks 14 24 11
pg 7 7 7

50x100
pg 14 14

in removeSatom sid=91
in remFromSidList 91 not found in list i@2:ListLink

Enter writeAtom
In writeAtom new sid=Z1
In writeAtom onging w/sid=Z1

Enter writeAtom
Exit writeAtom existing sid=Z1

is the sid being added twice!? Yikes! neear 273 oh its OK

in writeAtom add sid=G1 to ist=i@5:ListLink
Added sid G1 new sid list for i@5:ListLink is EG1

   size_t pos = sidlist.find(sid);
   while (std::string::npos != pos and 0 < pos)
   {
      if (' ' != sidlist[pos-1])
         pos = sidlist.find(sid, pos+1);
else break
   }

600
Fixed in latest flurry of rocks pushes


terminate called after throwing an instance of 'opencog::InvalidParamException'
  what():  Atom is already in the TLB, and UUID's don't match! (/home/linas/src/novamente/src/atomspace-git/opencog/atomspaceutils/TLB.cc:129)

SQLAtomLoad.cc:202 ... doGetLink ...
SQLAtomDelete.cc:106  UUID uuid = check_uuid(h);
StorageNode.cc:77

check_uuid(h)
if not in tlbuf,
   doGetLink
   returns uuid in db, puts into tlbuf.addAtom(link, uuid_

so storeAtm must have ...gotten a new uuid!?
test_persist_sql

----------

wtf.
/home/ubuntu/src/atomspace-rocks/opencog/persist/rocks/RocksIO.cc:575

remove 5dy3 its a CrossSection
it contains 6dy3 which is a ShapeLink
but 6dy3 has an empty income set...

(cog-rocks-open "rocks:///home/ubuntu/data/expt-16/gram-23-junk.rdb")
(cog-rocks-get "i@6dy3:")
(cog-rocks-get "i@6dy3:CrossSection")
It looks just fine, so wtf...
Database corruption!


cleanup: Removed sid

in removeSatom sid=DNw3
in remincoming ist=i@:Section
inset key=i@:Section<

(cog-rocks-open "rocks:///home/ubuntu/data/expt-16/gram-24-junk.rdb")
(cog-rocks-get "i@DNw3:")

Throw to key `C++-EXCEPTION' with args `("cog-rocks-open" "Can't open file: Corruption: Can't access /048536.sst: IO error: while stat a file for size: /home/ubuntu/data/expt-16/gram-24-junk.rdb/048536.sst: No such file or directory\n (/home/ubuntu/src/atomspace-rocks/opencog/persist/rocks/RocksStorage.cc:86)\nFunction args:\n(rocks:///home/ubuntu/data/expt-16/gram-24-junk.rdb)")'.


in writeAtom add sid=gRL6 to ist=i@6Lx3:CrossSection
Added sid gRL6 to sidlist for i@6Lx3:CrossSection bef=0 aft=1
bef=
aft=gRL6
in removeSatom sid=5Lx3
in remincoming ist=i@6Lx3:CrossSection
Error: Empty sidlist; can't find sid=5Lx3<
inset key=i@6Lx3:CrossSection<

(cog-rocks-print storage-node "i@6Lx3:CrossSection")

completely empty

scheme@(gram-class)> (cog-close storage-node)
scheme@(gram-class)> (cog-open storage-node)
ice-9/boot-9.scm:1669:16: In procedure raise-exception:
Throw to key `C++-EXCEPTION' with args `("cog-open" "Can't open file: IO error: While open directory: /home/ubuntu/data/expt-16/gram-25-junk.rdb: Too many open files (/home/ubuntu/src/atomspace-rocks/opencog/persist/rocks/RocksStorage.cc:86)\nFunction args:\n((RocksStorageNode \"rocks:///home/ubuntu/data/expt-16/gram-25-junk.rdb\")\n)")'.

 ah hah!
ulimit -1 -- 1024
find |wc  # 1009
lsof |grep guile | grep gram-25 |wc
  42441
lsof -p 30945 |wc
   1248
lsof -p 30945 |grep junk |wc
    987
find ~/data/expt-16/gram-25-junk.rdb |grep sst |wc
    989

So ... closing rocks does not close the open file handles... wtf.

CancelAllBackgroundWork(_rfile, true);
rocksdb_close()
delete_obsolete_files_period_micros = 5ULL * 1000000;
max_background_jobs = 4;
allow_mmap_reads = true;
options.compaction_pri = kMinOverlappingRatio;

lsof -p 24949 | grep junk | wc
    992
find ~/data/expt-16/gram-26-junk.rdb |grep sst |wc
    986

(cog-rocks-print storage-node "i@A6y3:CrossSection")


opts.set_max_open_files(max_open_files);

  int level0_file_num_compaction_trigger = 4;
soft_pending_compaction_bytes_limit

Wow. vast effing memleak: rocks is using 154 GBytes RAM!
https://github.com/facebook/rocksdb/issues/3216

avoid memleak by setting
cache_index_and_filter_blocks=true

need to turn on block cache.

uhh. print-range fails when rocks is corrupting things!

wow Seeks are wrong!
appendToSidList
remFromSidList
loadInset
fetch_incoming_set

sidlist style:
 9/12 Test  #9: MultiDeleteUTest .................   Passed   17.51 sec
11/12 Test #11: LargeFlatUTest ...................   Passed   83.93 sec
12/12 Test #12: LargeZipfUTest ...................   Passed  145.84 sec
Total Test time (real) = 265.20 sec
Total Test time (real) = 270.37 sec
Total Test time (real) = 285.15 sec


sidkey-style:
 9/12 Test  #9: MultiDeleteUTest .................   Passed   17.00 sec
11/12 Test #11: LargeFlatUTest ...................   Passed   82.52 sec
12/12 Test #12: LargeZipfUTest ...................   Passed  110.68 sec
Total Test time (real) = 225.92 sec
Total Test time (real) = 233.80 sec
Total Test time (real) = 226.48 sec


So its actually faster.


--------------------
start again. expt-17
cp -pr fake-corpus-w-wall pair-corpus
~/src/learn/run/2-word-pairs/run-all.sh
~/src/learn/run/3-mst-parsing/run-all-mst.sh

(define pca (make-pseudo-cset-api))
(define psa (add-pair-stars pca))

(define wsv (add-shape-vec-api psa))
(define wss (add-pair-stars wsv))

(define cac (direct-sum psa wss))
(define csc (add-pair-stars cac))
(csc 'fetch-pairs)

(define btc (batch-transpose csc))
(btc 'mmt-marginals)
(print-matrix-summary-report csc)
((make-store csc) 'store-all)  ; ... is this needed? Its slow!
 ------ its not needed.

(gram-classify-greedy-discrim csc 0.25 4)

starting with shape-naked ...

--- To-do=15 ncls=0 sing=0 nredo=0 2021-04-11 22:55:07 -- "e" ---
--- To-do=14 ncls=0 sing=1 nredo=0 2021-04-11 22:55:16 -- "WALL" ---
Dist=0.0014 for word "e" -- "WALL" in 17.69 secs
--- To-do=13 ncls=0 sing=2 nredo=0 2021-04-11 22:55:38 -- "j" ---
Dist=0.9878 for word "e" -- "j" in 24.82 secs
---------Bingo! Dist=0.9878 for word "e" -- "j"
---------Merged 174041 sections in 48.00 secs; 3625.9 scts/sec
--- Greedy-checking next 12 items
Dist=0.6153 for class "e j" -- "d" in 24.99 secs
---------Bingo! Dist=0.6153 for class "e j" -- "d"
---------Merged 208189 sections in 104.0 secs; 2001.8 scts/sec
Dist=   0.0 for class "e j d" -- "###LEFT-WALL###" in 27.79 secs
Dist=0.0089 for class "e j d" -- "!" in 18.08 secs
Dist=0.6402 for class "e j d" -- "a" in 22.23 secs
---------Bingo! Dist=0.6402 for class "e j d" -- "a"
---------Merged 238977 sections in 130.0 secs; 1838.3 scts/sec
Dist=   0.0 for class "e j d a" -- "LEFT" in 30.90 secs
Dist=0.7550 for class "e j d a" -- "b" in 26.49 secs
---------Bingo! Dist=0.7550 for class "e j d a" -- "b"
---------Merged 270094 sections in 152.0 secs; 1776.9 scts/sec
Dist=   0.0 for class "e j d a b" -- "-" in 34.42 secs
Dist=0.3393 for class "e j d a b" -- "f" in 25.15 secs
---------Bingo! Dist=0.3393 for class "e j d a b" -- "f"
---------Merged 279128 sections in 152.0 secs; 1836.4 scts/sec
Dist=0.2493 for class "e j d a b f" -- "h" in 32.48 secs
Dist=0.3591 for class "e j d a b f" -- "c" in 28.42 secs
---------Bingo! Dist=0.3591 for class "e j d a b f" -- "c"
---------Merged 284704 sections in 164.0 secs; 1736.0 scts/sec
Dist=0.4848 for class "e j d a b f c" -- "g" in 31.99 secs
---------Bingo! Dist=0.4848 for class "e j d a b f c" -- "g"
---------Merged 288253 sections in 163.0 secs; 1768.4 scts/sec
Dist=0.1007 for class "e j d a b f c g" -- "i" in 32.86 secs
--- Checking the done-list len=0
---- Remaining count = 172.63 of 829662.0 for "j"
--- To-do=12 ncls=1 sing=1 nredo=2 2021-04-11 23:25:40 -- "d" ---
Dist=0.0000 for word "WALL" -- "d" in 9.347 secs
--- To-do=11 ncls=1 sing=2 nredo=2 2021-04-11 23:25:50 -- "###LEFT-WALL###" ---
Dist=   0.0 for class "e j" -- "###LEFT-WALL###" in 6.495 secs
Dist=   0.0 for word "WALL" -- "###LEFT-WALL###" in 11.76 secs
Dist=   0.0 for word "d" -- "###LEFT-WALL###" in 5.480 secs
--- To-do=10 ncls=1 sing=3 nredo=2 2021-04-11 23:26:17 -- "!" ---
Dist=   0.0 for word "WALL" -- "!" in 6.542 secs
Dist=   0.0 for word "###LEFT-WALL###" -- "!" in 8.203 secs
Dist=   0.0 for word "LEFT" -- "-" in 9.220 secs

Bug: the class name is not supposed to get longer like that...
Bug: there is not supposed to be WALL and LEFT ...
I guess this is a corpus bug!? A splitter bug?

Bug: why is there a "-" word ???? wtf?


link-class.scm ???
====================================================

FIXED:
* Create a generic run-shells.sh   DONE.
* Change shape-vect to use ShapeLink, CrossSection. DONE
* Fix link-generator to do full combinatorial. DONE #1175
* Pair counting insanely slow and leaks RAM.
* learn.scm use include not load or export... DONE
* Alter dict generator to automatically place period at end of sentence.
	DONE.
  Also, to automatically produce left-wall and right wall; these
  need to be present for dict-compare to work without hackery.
	DONE.

TODO/BUGS:

* Implement connector merging.
* Set up direct-sum/shape clustering run scripts.
* Write unit test for the recent caching fix in the pattern matcher,
  its doable...
* print-matrix-summary-report after MM^T shows nothing. Why?
  because 'mmt-marginals computes only word-pair entropies.
* Fix count transfer in add-singleton-classes
* cogserver is not flushing output on 2nd and later connections .. wtf!
  or just behaving incoherently/inconsistently with netcat.
  echo -e "(for-each (lambda (n) (sleep 1) (format #t \"ping ~A\" n)(newline)) (iota 10 1))\n.\n." | nc localhost 17001
* Alter LG to allow multiple word definitions w/o subscripts.
* Bugs: quotes are not being escaped by submit-one.pl!!
* Enhance: revise atomspace start-cogserver to take args directly
* Bug: RockDB needs to be compacted on close. closing and reopening
  a DB shrinks disk use by 20x for some workloads.
  Also its chewing up vast amounts of RAM. Bugs #9 and #10
* GC during pair counting happens too often.
  (that is, gc takes up too large a fraction of CPU.)
* Pair counting disappointingly slow.
